import React from 'react';
import { ImageSourcePropType } from 'react-native';

declare type Padding = {
    leading?: number;
    top?: number;
    bottom?: number;
    trailing?: number;
    horizontal?: number;
    vertical?: number;
    all?: number;
} | number;
declare type HorizontalAlignment = 'leading' | 'center' | 'trailing';
declare type VerticalAlignment = 'top' | 'center' | 'bottom';
declare type Shadow = {
    color?: string;
    x?: number;
    y?: number;
    radius?: number;
    opacity?: number;
};
declare type Frame = {
    width?: number | string;
    height?: number | string;
    maxWidth?: number | string;
    maxHeight?: number | string;
    minWidth?: number | string;
    minHeight?: number | string;
};

declare type TextProps = {
    fontSize?: number;
    font?: string;
    foregroundColor?: string;
    fontWeight?: string;
    alignment?: VerticalAlignment | HorizontalAlignment;
    padding?: Padding;
    cornerRadius?: number;
    shadow?: Shadow;
    buttonChild?: boolean;
};
declare const Text: React.FC<TextProps>;

declare type ImageProps = {
    source?: ImageSourcePropType;
    systemName?: string;
    frame?: Frame;
    foregroundColor?: string;
};
declare const Image: React.FC<ImageProps>;

declare type ButtonProps = {
    action?: () => void;
    disabled?: boolean;
    text?: string;
    background?: string;
    padding?: Padding;
    cornerRadius?: number;
    shadow?: Shadow;
    border?: object;
    fontSize?: number;
    fontWeight?: number;
    foregroundColor?: string;
    children?: React.ReactElement<any>;
    alignment?: HorizontalAlignment | VerticalAlignment;
};
declare const Button: ({ action, text, background, foregroundColor, cornerRadius, padding, alignment, children, ...props }: ButtonProps) => JSX.Element;

declare const Spacer: React.FC;

declare type ScrollViewProps = {
    direction?: 'vertical' | 'horizontal';
    background?: string;
    showIndicators?: boolean;
};
declare const ScrollView: React.FC<ScrollViewProps>;

declare type ListProps = {
    children: React.ReactElement<any> | Array<React.ReactElement<any>>;
    listStyle?: 'insetGrouped' | 'grouped';
    background?: string;
    onDelete?: (i: number) => void;
};
declare const List: ({ listStyle, onDelete, background, children, }: ListProps) => JSX.Element;

declare type LinkProps = {
    destination: string;
    text?: string;
    children?: React.ReactElement<any>;
} & ButtonProps;
declare const Link: ({ destination, text, children, ...props }: LinkProps) => JSX.Element;

declare type LabelProps = {
    text?: string;
    systemName?: string;
    icon?: React.ReactElement;
    children?: React.ReactElement<TextProps>;
};
declare const Label: ({ text, systemName, icon }: LabelProps) => JSX.Element;

declare type ToggleProps = {
    isOn: boolean;
    onColor?: string;
    offColor?: string;
    onToggle: () => void;
};
declare const Toggle: React.FC<ToggleProps>;

declare type StepperProps = {
    onIncrement: () => void;
    onDecrement: () => void;
};
declare const Stepper: React.FC<StepperProps>;

declare type SliderProps = {
    color?: string;
    step?: number;
    range?: [number, number];
    value: number;
    onSlide: (n: number) => void;
};
declare const Slider: React.FC<SliderProps>;

declare type RoundedRectangleProps = {
    fill: string;
    frame: Frame;
    cornerRadius?: number;
};
declare const RoundedRectangle: React.FC<RoundedRectangleProps>;

declare type PickerProps = {
    background: string;
    items: Array<any>;
    selection?: number;
    onSelect: (n: number) => void;
};
declare type WheelPickerProps = PickerProps & {
    pickerStyle: 'wheel';
};
declare type SegmentedPickerProps = PickerProps & {
    pickerStyle: 'segmented';
};
declare type ListPickerProps = PickerProps & {
    pickerStyle: 'insetGrouped' | 'grouped';
};
declare const Picker: (props: ListPickerProps | WheelPickerProps | SegmentedPickerProps) => JSX.Element;

declare type TextFieldProps = {
    placeholder?: string;
    text: string;
    onChangeText: () => void;
    frame?: Frame;
    textFieldStyle?: 'animated' | 'plain' | 'rounded-border';
    background?: string;
    foregroundColor?: string;
};
declare const TextField: React.FC<TextFieldProps>;

declare type BottomSheetProps = {
    background?: string;
    opacity?: number;
    header?: string;
    snapPoints?: string[];
};
declare const BottomSheet: React.FC<BottomSheetProps>;

declare type ColorScheme = 'light' | 'dark';
declare type ColorSchemeProviderProps = {
    defaultMode?: ColorScheme;
};
declare const ColorSchemeContext: React.Context<any>;
declare const ColorSchemeManager: React.FC<ColorSchemeProviderProps>;

declare type VStackProps = {
    background?: string;
    alignment?: HorizontalAlignment;
    padding?: Padding;
    spacing?: number;
    width?: number;
    frame?: Frame;
    fillSpace?: string;
    cornerRadius?: number;
    children: React.ReactElement<any> | React.ReactElement<any>[];
};
declare const VStack: ({ background, spacing, alignment, cornerRadius, padding, frame, children, }: VStackProps) => JSX.Element;

declare type HStackProps = {
    background?: string;
    alignment?: VerticalAlignment;
    padding?: Padding;
    spacing?: number;
    frame?: Frame;
    cornerRadius?: number;
    children: React.ReactElement<any> | React.ReactElement<any>[];
};
declare const HStack: React.FC<HStackProps>;

declare type ZStackProps = {
    background?: string;
    alignment?: HorizontalAlignment | VerticalAlignment;
    padding?: Padding;
    spacing?: number;
    width?: number;
    frame?: Frame;
    cornerRadius?: number;
    children: React.ReactElement<any> | React.ReactElement<any>[];
};
declare const ZStack: ({ background, cornerRadius, padding, frame, children, }: ZStackProps) => JSX.Element;

declare function useOnAppear(perform: Function): void;

declare function useOnDisappear(perform: () => void): void;

declare type AlertButtons = {
    text: string;
    onPress: () => void;
};
declare type AlertData = {
    title: string;
    message: string;
    buttons: Array<AlertButtons>;
};
declare const useAlert: (isPresented: boolean, alert: AlertData) => void;

declare const useColorScheme: () => any;

declare type UIColorNames = keyof typeof COLOR_VALUES;
declare const COLOR_VALUES: {
    black: {
        light: string;
        dark: string;
    };
    white: {
        light: string;
        dark: string;
    };
    transparent: {
        light: string;
        dark: string;
    };
    systemBackground: {
        light: string;
        dark: string;
    };
    systemRed: {
        light: string;
        dark: string;
    };
    systemBlue: {
        light: string;
        dark: string;
    };
    systemGreen: {
        light: string;
        dark: string;
    };
    systemIndigo: {
        light: string;
        dark: string;
    };
    systemTeal: {
        light: string;
        dark: string;
    };
    systemPink: {
        light: string;
        dark: string;
    };
    systemPurple: {
        light: string;
        dark: string;
    };
    systemOrange: {
        light: string;
        dark: string;
    };
    systemYellow: {
        light: string;
        dark: string;
    };
    systemGray: {
        light: string;
        dark: string;
    };
    systemGray2: {
        light: string;
        dark: string;
    };
    systemGray3: {
        light: string;
        dark: string;
    };
    systemGray4: {
        light: string;
        dark: string;
    };
    systemGray5: {
        light: string;
        dark: string;
    };
    systemGray6: {
        light: string;
        dark: string;
    };
};
/**
 * A map of all UIColors
 */
declare const UIColor: {
    [key in UIColorNames]: string;
};

export { BottomSheet, Button, ButtonProps, ColorScheme, ColorSchemeContext, ColorSchemeManager, HStack, Image, Label, Link, List, ListPickerProps, Picker, RoundedRectangle, ScrollView, SegmentedPickerProps, Slider, Spacer, Stepper, Text, TextField, TextFieldProps, TextProps, Toggle, UIColor, VStack, WheelPickerProps, ZStack, useAlert, useColorScheme, useOnAppear, useOnDisappear };

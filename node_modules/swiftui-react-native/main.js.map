{"version":3,"file":"main.js","sources":["../src/utils/colors/index.ts","../src/utils/fonts/index.ts","../src/utils/padding/index.ts","../src/utils/shadow/index.ts","../src/views/ColorSchemeManager/ColorSchemeManager.tsx","../src/hooks/useColorScheme.ts","../src/views/Text/Text.tsx","../src/views/Image/Image.tsx","../src/utils/alignments/index.ts","../src/views/Button/Button.tsx","../src/views/Spacer/Spacer.tsx","../src/views/ScrollView/ScrollView.tsx","../src/views/List/ListStyles.ts","../src/views/List/SwipeableItem.tsx","../src/views/List/List.tsx","../src/views/Link/Link.tsx","../src/utils/frame/index.ts","../src/views/HStack/HStack.tsx","../src/views/Label/Label.tsx","../src/views/Toggle/Toggle.tsx","../src/views/Stepper/Stepper.tsx","../src/views/Slider/Constants.ts","../src/views/Slider/Cursor.tsx","../src/views/Slider/FillBar.tsx","../src/views/Slider/Slider.tsx","../src/views/RoundedRectangle/RoundedRectangle.tsx","../src/views/Picker/Constants.ts","../src/views/Picker/AnimationHelpers.tsx","../src/views/Picker/Wheel/WheelGestureHandler.tsx","../src/views/Picker/Wheel/WheelPicker.tsx","../src/views/Picker/List/CheckMark.tsx","../src/views/Picker/List/ListPicker.tsx","../src/views/Picker/Segmented/SegmentedPicker.tsx","../src/views/Picker/Picker.tsx","../src/views/TextField/PlainTextField.tsx","../src/views/TextField/RoundedBorderTextField.tsx","../src/views/TextField/AnimatedTextField.tsx","../src/views/TextField/TextField.tsx","../src/views/BottomSheet/BackgroundShadow.tsx","../src/views/BottomSheet/Constants.tsx","../src/views/BottomSheet/Content.tsx","../src/views/BottomSheet/Header.tsx","../src/views/BottomSheet/PullLine.tsx","../src/views/BottomSheet/BottomSheet.tsx","../src/views/VStack/VStack.tsx","../src/views/ZStack/ZStack.tsx","../src/hooks/useOnAppear.ts","../src/hooks/useOnDisappear.ts","../src/hooks/useAlert.ts"],"sourcesContent":["import { ColorScheme } from '../../views/ColorSchemeManager';\n\ntype UIColorNames = keyof typeof COLOR_VALUES;\n\nconst COLOR_VALUES = {\n  black: { light: '#000', dark: '#fff' },\n  white: { light: '#fff', dark: '#000' },\n  transparent: { light: 'transparent', dark: 'transparent' },\n  systemBackground: { light: '#fff', dark: '#000' },\n  systemRed: { light: '#ff3b30', dark: '#ff3b30' },\n  systemBlue: { light: '#007bff', dark: '#0a84ff' },\n  systemGreen: { light: '#34c759', dark: '#30d158' },\n  systemIndigo: { light: '#5856d6', dark: '#5e5ce6' },\n  systemTeal: { light: '#5ac7fa', dark: '#64d2ff' },\n  systemPink: { light: '#ff2d54', dark: '#ff375f' },\n  systemPurple: { light: '#af52de', dark: '#bf5af2' },\n  systemOrange: { light: '#ff9500', dark: '#ff9f0a' },\n  systemYellow: { light: '#ffcc00', dark: '#ffd60a' },\n  systemGray: { light: '#8e8e93', dark: '#8e8e93' },\n  systemGray2: { light: '#aeaeb2', dark: '#636366' },\n  systemGray3: { light: '#c7c7cc', dark: '#48484a' },\n  systemGray4: { light: '#d1d1d6', dark: '#3a3a3c' },\n  systemGray5: { light: '#e5e5ea', dark: '#2c2c2e' },\n  systemGray6: { light: '#f2f2f7', dark: '#1c1c1e' },\n};\n\n/**\n * A map of all UIColors\n */\nexport const UIColor: { [key in UIColorNames]: string } = {\n  black: 'black',\n  white: 'white',\n  transparent: 'transparent',\n  systemBackground: 'systemBackground',\n  systemRed: 'systemRed',\n  systemBlue: 'systemBlue',\n  systemGreen: 'systemGreen',\n  systemIndigo: 'systemIndigo',\n  systemTeal: 'systemTeal',\n  systemPink: 'systemPink',\n  systemPurple: 'systemPurple',\n  systemOrange: 'systemOrange',\n  systemYellow: 'systemYellow',\n  systemGray: 'systemGray',\n  systemGray2: 'systemGray2',\n  systemGray3: 'systemGray3',\n  systemGray4: 'systemGray4',\n  systemGray5: 'systemGray5',\n  systemGray6: 'systemGray6',\n};\n\n/**\n * Gets the color hex value for a given color.\n * If a color scheme is provided, the appropriate color will be chosen.\n * Defaults to light mode.\n */\nexport const systemColor = (\n  color: string,\n  colorScheme?: ColorScheme\n): string => {\n  const colorValues = COLOR_VALUES[color];\n  if (colorValues) {\n    return colorScheme ? colorValues[colorScheme] : colorValues.light;\n  }\n  return color;\n};\n\n// UNIMPLEMENTED COLORS\n// link: 'link',\n// label: 'label',\n// secondaryLabel: 'secondaryLabel',\n// tertiaryLabel: 'tertiaryLabel',\n// quaternaryLabel: 'quaternaryLabel',\n// systemFill: 'systemFill',\n// secondarySystemFill: 'secondarySystemFill',\n// tertiarySystemFill: 'tertiarySystemFill',\n// quaternarySystemFill: 'quaternarySystemFill',\n// secondarySystemBackground: 'secondarySystemBackground',\n// tertiarySystemBackground: 'tertiarySystemBackground',\n","export const Fonts = {\n  fonts: { system: 'System' },\n  weights: {\n    normal: 'normal',\n    bold: 'bold',\n    heavy: '800',\n    light: '500',\n    medium: '600',\n  },\n};\n\nexport const FontStyles = {\n  title: { fontSize: 20 },\n  title2: { fontSize: 15 },\n  title3: { fontSize: 12 },\n  largeTitle: { fontSize: 30 },\n  headline: { fontSize: 10, fontWeight: 'bold' },\n  subHeadline: { fontSize: 10 },\n  body: { fontSize: 12 },\n  callout: { fontSize: 10 },\n  caption: { fontSize: 10 },\n  caption2: { fontSize: 10 },\n  caption3: { fontSize: 10 },\n  footnote: { fontSize: 10 },\n};\n\nexport const getFont = (font: string) => {\n  return FontStyles[font];\n};\n","import { Padding } from '../../types/propTypes';\n\nexport const getPadding = (paddingProps: Padding) => {\n  if (!paddingProps) return null;\n  if (typeof paddingProps === 'number') {\n    return {\n      paddingTop: paddingProps,\n      paddingBottom: paddingProps,\n      paddingLeft: paddingProps,\n      paddingRight: paddingProps,\n    };\n  }\n  const {\n    top,\n    bottom,\n    leading,\n    trailing,\n    vertical,\n    horizontal,\n    all,\n  } = paddingProps;\n  return {\n    ...((top || vertical || all) && {\n      paddingTop: all || vertical || top || null,\n    }),\n    ...((bottom || vertical || all) && {\n      paddingBottom: all || vertical || bottom || null,\n    }),\n    ...((leading || horizontal || all) && {\n      paddingLeft: all || horizontal || leading || null,\n    }),\n    ...((trailing || horizontal || all) && {\n      paddingRight: all || horizontal || trailing || null,\n    }),\n  };\n};\n","import { Shadow } from '../../types/propTypes';\n\nexport const getShadow = (shadow: Shadow) => {\n  if (!shadow) return null;\n  return {\n    ...(shadow.color && { shadowColor: shadow.color }),\n    ...(shadow.radius && { shadowRadius: shadow.radius }),\n    ...(shadow.x &&\n      shadow.y && { shadowOffset: { width: shadow.x, height: shadow.y } }),\n  };\n};\n","import React, { createContext, useState } from 'react';\n\nexport type ColorScheme = 'light' | 'dark';\ntype ColorSchemeProviderProps = { defaultMode?: ColorScheme };\n\nexport const ColorSchemeContext = createContext(null);\n\nexport const ColorSchemeManager: React.FC<ColorSchemeProviderProps> = ({\n  defaultMode = 'light',\n  children,\n}) => {\n  const [colorScheme, setColorScheme] = useState(defaultMode);\n  const toggleColorScheme = (to: ColorScheme = null) => {\n    if (to) {\n      setColorScheme(to);\n    } else if (colorScheme === 'light') {\n      setColorScheme('dark');\n    } else {\n      setColorScheme('light');\n    }\n  };\n  return (\n    <ColorSchemeContext.Provider value={{ colorScheme, toggleColorScheme }}>\n      {children}\n    </ColorSchemeContext.Provider>\n  );\n};\n","import { useContext } from 'react';\nimport { ColorSchemeContext } from '../views/ColorSchemeManager';\n\nexport const useColorScheme = () =>\n  useContext(ColorSchemeContext) || {\n    colorScheme: 'light',\n    setColorScheme: null,\n  };\n","import React from 'react';\nimport { Text as RNText } from 'react-native';\nimport { systemColor, UIColor } from '../../utils/colors';\nimport { Fonts } from '../../utils/fonts';\nimport { getPadding } from '../../utils/padding';\nimport {\n  VerticalAlignment,\n  HorizontalAlignment,\n  Padding,\n  Shadow,\n} from '../../types/propTypes';\nimport { getShadow } from '../../utils/shadow';\nimport { useColorScheme } from '../../hooks/useColorScheme';\n\nexport type TextProps = {\n  fontSize?: number;\n  font?: string;\n  foregroundColor?: string;\n  fontWeight?: string;\n  alignment?: VerticalAlignment | HorizontalAlignment;\n  padding?: Padding;\n  cornerRadius?: number;\n  shadow?: Shadow;\n  buttonChild?: boolean;\n};\n\nexport const Text: React.FC<TextProps> = ({\n  fontSize = 18,\n  font,\n  foregroundColor = UIColor.black,\n  fontWeight,\n  alignment = 'center',\n  padding,\n  cornerRadius = 0,\n  shadow,\n  children,\n  buttonChild,\n  ...props\n}) => {\n  const { colorScheme } = useColorScheme();\n  return (\n    <RNText\n      style={{\n        color: buttonChild\n          ? systemColor(UIColor.systemBlue, colorScheme)\n          : systemColor(foregroundColor, colorScheme),\n        fontSize,\n        fontWeight: Fonts.weights[fontWeight] || Fonts.weights.normal,\n        fontFamily: Fonts.fonts[font] || Fonts.fonts.system,\n        textAlign: alignment === 'leading' ? 'left' : 'center',\n        borderRadius: cornerRadius,\n        ...getShadow(shadow),\n        ...getPadding(padding),\n      }}\n      {...props}\n    >\n      {children}\n    </RNText>\n  );\n};\n","import React from 'react';\nimport { Image as RNImage, ImageSourcePropType } from 'react-native';\nimport { Frame } from '../../types/propTypes';\n// import {\n//   SFSymbol,\n//   SFSymbolWeight,\n//   SFSymbolScale,\n// } from 'react-native-sfsymbols';\n\ntype ImageProps = {\n  source?: ImageSourcePropType;\n  systemName?: string;\n  frame?: Frame;\n  foregroundColor?: string;\n};\n\nconst DEFAULT_IMAGE_SIZE = 15;\n\nexport const Image: React.FC<ImageProps> = ({\n  source,\n  systemName,\n  foregroundColor,\n  frame = { width: DEFAULT_IMAGE_SIZE, height: DEFAULT_IMAGE_SIZE },\n}) => {\n  if (systemName) {\n    return null;\n    // <SFSymbol\n    //   name={systemName}\n    //   weight={SFSymbolWeight.SEMIBOLD}\n    //   scale={SFSymbolScale.SMALL}\n    //   color={foregroundColor}\n    // />\n  }\n  return (\n    <RNImage\n      source={source}\n      style={{\n        width: frame.width,\n        height: frame.height,\n      }}\n    />\n  );\n};\n","export const Alignments = {\n  horizontal: {\n    leading: 'flex-start',\n    center: 'center',\n    trailing: 'flex-end',\n  },\n  vertical: {\n    top: 'flex-start',\n    center: 'center',\n    bottom: 'flex-end',\n  },\n};\n","import React from 'react';\nimport { TouchableOpacity } from 'react-native';\nimport { Alignments } from '../../utils/alignments';\nimport { systemColor, UIColor } from '../../utils/colors';\nimport {\n  VerticalAlignment,\n  HorizontalAlignment,\n  Padding,\n  Shadow,\n} from '../../types/propTypes';\nimport { Text } from '../Text';\n\nexport type ButtonProps = {\n  action?: () => void;\n  disabled?: boolean;\n  text?: string;\n  background?: string;\n  padding?: Padding;\n  cornerRadius?: number;\n  shadow?: Shadow;\n  border?: object;\n  fontSize?: number;\n  fontWeight?: number;\n  foregroundColor?: string;\n  children?: React.ReactElement<any>;\n  alignment?: HorizontalAlignment | VerticalAlignment;\n};\n\nexport const Button = ({\n  action,\n  text,\n  background = UIColor.transparent,\n  foregroundColor = UIColor.systemBlue,\n  cornerRadius = 0,\n  padding = 0,\n  alignment,\n  children,\n  ...props\n}: ButtonProps) => {\n  return (\n    <TouchableOpacity\n      onPress={action}\n      style={{\n        backgroundColor: background,\n        justifyContent: 'center',\n        alignItems:\n          Alignments.horizontal[alignment] || Alignments.horizontal.center,\n        borderRadius: cornerRadius,\n      }}\n      {...props}\n    >\n      {text ? (\n        // Send in props from button to text\n        <Text buttonChild={!foregroundColor} foregroundColor={foregroundColor}>\n          {text}\n        </Text>\n      ) : (\n        React.Children.map(children, (child) =>\n          React.cloneElement(child, {\n            ...child.props,\n            ...{ buttonChild: !foregroundColor },\n          })\n        )\n      )}\n    </TouchableOpacity>\n  );\n};\n","import React from 'react';\nimport { View } from 'react-native';\n\nexport const Spacer: React.FC = () => {\n  return (\n    <View\n      style={{\n        flex: 1,\n      }}\n    />\n  );\n};\n","import React from 'react';\nimport { ScrollView as RNScrollView } from 'react-native';\nimport { useColorScheme } from '../../hooks/useColorScheme';\nimport { systemColor, UIColor } from '../../utils/colors';\n\ntype ScrollViewProps = {\n  direction?: 'vertical' | 'horizontal';\n  background?: string;\n  showIndicators?: boolean;\n};\n\nexport const ScrollView: React.FC<ScrollViewProps> = ({\n  children,\n  direction = 'vertical',\n  background = UIColor.transparent,\n  showIndicators = true,\n}) => {\n  const { colorScheme } = useColorScheme();\n  return (\n    <RNScrollView\n      horizontal={direction === 'horizontal'}\n      scrollEventThrottle={1}\n      showsVerticalScrollIndicator={showIndicators}\n      showsHorizontalScrollIndicator={showIndicators}\n      style={{ backgroundColor: systemColor(background, colorScheme) }}\n    >\n      {children}\n    </RNScrollView>\n  );\n};\n","import { StyleProp, StyleSheet, ViewStyle } from 'react-native';\nimport { useColorScheme } from '../../hooks/useColorScheme';\nimport { systemColor, UIColor } from '../../utils/colors';\n\ntype ItemModifiers = {\n  index?: number;\n  total?: number;\n  background?: string;\n};\n\nexport const getContainerStyles: (\n  listStyle: string,\n  modifiers?: ItemModifiers\n) => StyleProp<ViewStyle> = (listStyle, { background }) => {\n  const { colorScheme } = useColorScheme();\n  const styles = {\n    grouped: {\n      backgroundColor: systemColor(background, colorScheme),\n      width: '100%',\n      borderBottomWidth: StyleSheet.hairlineWidth * 1.2,\n      borderTopWidth: StyleSheet.hairlineWidth * 1.2,\n      borderColor: systemColor(UIColor.systemGray3, colorScheme),\n    },\n    insetGrouped: {\n      backgroundColor: systemColor(background, colorScheme),\n      width: '90%',\n      borderRadius: 10,\n      overflow: 'hidden',\n    },\n  };\n  return styles[listStyle];\n};\n\nexport const getItemStyles: (\n  listStyle: string,\n  modifiers?: ItemModifiers\n) => StyleProp<ViewStyle> = (listStyle, { index, total }) => {\n  const styles = {\n    grouped: {\n      backgroundColor: systemColor(UIColor.transparent),\n      width: '100%',\n    },\n    insetGrouped: {\n      backgroundColor: systemColor(UIColor.transparent),\n      width: '100%',\n      borderTopRightRadius: index === 0 ? 10 : 0,\n      borderBottomRightRadius: index === total ? 10 : 0,\n      borderTopLeftRadius: index === 0 ? 10 : 0,\n      borderBottomLeftRadius: index === total ? 10 : 0,\n    },\n  };\n  return styles[listStyle];\n};\n","import React from 'react';\nimport { Dimensions, StyleSheet, TouchableOpacity } from 'react-native';\nimport { PanGestureHandler, State } from 'react-native-gesture-handler';\nimport Animated, {\n  add,\n  call,\n  clockRunning,\n  cond,\n  eq,\n  interpolate,\n  not,\n  set,\n  useCode,\n  useValue,\n} from 'react-native-reanimated';\nimport {\n  snapPoint,\n  timing,\n  clamp,\n  useClock,\n  usePanGestureHandler,\n  minus,\n} from 'react-native-redash/lib/module/v1';\nimport { useColorScheme } from '../../hooks/useColorScheme';\nimport { systemColor, UIColor } from '../../utils/colors';\n\ntype SwipeableItemProps = {\n  onDelete: (i: number) => void;\n  index: number;\n};\n\nconst { width } = Dimensions.get('window');\nconst snapPoints = [-width, -100, 0];\nconst HEIGHT = 50;\n\nexport const SwipeableItem: React.FC<SwipeableItemProps> = ({\n  onDelete,\n  index,\n  children,\n}) => {\n  const {\n    gestureHandler,\n    translation,\n    velocity,\n    state,\n  } = usePanGestureHandler();\n  const translateX = useValue(0);\n  const offsetX = useValue(0);\n  const height = useValue(HEIGHT);\n  const clock = useClock();\n  const to = snapPoint(translateX, velocity.x, snapPoints);\n  const shouldRemove = useValue<0 | 1>(0);\n\n  const translateText = clamp(\n    interpolate(translateX, {\n      inputRange: [-100, 0],\n      outputRange: [0, 100],\n    }),\n    0,\n    100\n  );\n  const textOpacity = interpolate(height, {\n    inputRange: [0, HEIGHT],\n    outputRange: [0, 1],\n  });\n  useCode(\n    () => [\n      cond(\n        eq(state, State.ACTIVE),\n        set(\n          translateX,\n          add(offsetX, clamp(translation.x, -9999, minus(offsetX)))\n        )\n      ),\n      cond(eq(state, State.END), [\n        set(translateX, timing({ clock, from: translateX, to })),\n        set(offsetX, translateX),\n        cond(eq(to, -width), set(shouldRemove, 1)),\n      ]),\n      cond(shouldRemove, [\n        set(height, timing({ from: HEIGHT, to: 0 })),\n        cond(\n          not(clockRunning(clock)),\n          call([], () => onDelete(index))\n        ),\n      ]),\n    ],\n    []\n  );\n\n  const { colorScheme } = useColorScheme();\n  return (\n    <Animated.View\n      style={{ backgroundColor: systemColor(UIColor.systemRed, colorScheme) }}\n    >\n      <Animated.View\n        style={[\n          StyleSheet.absoluteFillObject,\n          {\n            zIndex: -1,\n            alignItems: 'flex-end',\n            justifyContent: 'center',\n            marginRight: 20,\n            transform: [{ translateX: translateText }],\n          },\n        ]}\n      >\n        <TouchableOpacity onPress={() => shouldRemove.setValue(1)}>\n          <Animated.Text\n            style={{ color: systemColor(UIColor.white), opacity: textOpacity }}\n          >\n            Delete\n          </Animated.Text>\n        </TouchableOpacity>\n      </Animated.View>\n      <PanGestureHandler {...gestureHandler}>\n        <Animated.View style={{ height, transform: [{ translateX }] }}>\n          {children}\n        </Animated.View>\n      </PanGestureHandler>\n    </Animated.View>\n  );\n};\n","import React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { useColorScheme } from '../../hooks/useColorScheme';\nimport { systemColor, UIColor } from '../../utils/colors';\nimport { getContainerStyles, getItemStyles } from './ListStyles';\nimport { SwipeableItem } from './SwipeableItem';\n\ntype ListProps = {\n  children: React.ReactElement<any> | Array<React.ReactElement<any>>;\n  listStyle?: 'insetGrouped' | 'grouped';\n  background?: string;\n  onDelete?: (i: number) => void;\n};\n\nexport const List = ({\n  listStyle = 'insetGrouped',\n  onDelete,\n  background = UIColor.white,\n  children,\n}: ListProps) => {\n  const { colorScheme } = useColorScheme();\n  return (\n    <View style={getContainerStyles(listStyle, { background })}>\n      {React.Children.map(children, (child, i) => {\n        const totalChildren = React.Children.toArray(children).length - 1;\n        const listItem = (\n          <React.Fragment key={i}>\n            <View\n              style={[\n                getItemStyles(listStyle, {\n                  index: i,\n                  total: totalChildren,\n                }),\n                {\n                  paddingVertical: 12,\n                  paddingHorizontal: 20,\n                  backgroundColor: systemColor(background, colorScheme),\n                },\n              ]}\n              key={i}\n            >\n              {React.cloneElement(child, {\n                ...child.props,\n                ...{ listItem: true },\n              })}\n            </View>\n            {i !== totalChildren && (\n              <View\n                style={{\n                  borderColor: systemColor(UIColor.systemGray3, colorScheme),\n                  borderBottomWidth: StyleSheet.hairlineWidth * 1.2,\n                  marginLeft: 20,\n                }}\n              />\n            )}\n          </React.Fragment>\n        );\n        return onDelete ? (\n          <SwipeableItem onDelete={onDelete} index={i}>\n            {listItem}\n          </SwipeableItem>\n        ) : (\n          listItem\n        );\n      })}\n    </View>\n  );\n};\n","import React from 'react';\nimport { Linking } from 'react-native';\nimport { Button, ButtonProps } from '../Button';\n\ntype LinkProps = {\n  destination: string;\n  text?: string;\n  children?: React.ReactElement<any>;\n} & ButtonProps;\n\nexport const Link = ({ destination, text, children, ...props }: LinkProps) => (\n  <Button text={text} action={() => Linking.openURL(destination)} {...props}>\n    {children}\n  </Button>\n);\n","import { Frame } from '../../types/propTypes';\n\nexport const getFrame = (frame: Frame) => {\n  const defaultStyles = { width: '100%' };\n  let styles = {};\n  if (!frame) return defaultStyles;\n\n  // Case: maxHeight: 'infinity'\n  if (frame.maxHeight === 'infinity') {\n    styles = { ...styles, flex: 1 };\n    delete frame.maxHeight;\n  }\n\n  // Case: add width: '100%' if not included in frame\n  if (!Object.keys(frame).includes('width')) {\n    styles = { ...styles, ...defaultStyles };\n  }\n\n  return { ...styles, ...frame };\n};\n","import React from 'react';\nimport { VerticalAlignment, Frame, Padding } from '../../types/propTypes';\nimport { systemColor, UIColor } from '../../utils/colors';\nimport { FlexAlignType, View } from 'react-native';\nimport { getPadding } from '../../utils/padding';\nimport { Alignments } from '../../utils/alignments';\nimport { getFrame } from '../../utils/frame';\nimport { useColorScheme } from '../../hooks/useColorScheme';\n\ntype HStackProps = {\n  background?: string;\n  alignment?: VerticalAlignment;\n  padding?: Padding;\n  spacing?: number;\n  frame?: Frame;\n  cornerRadius?: number;\n  children: React.ReactElement<any> | React.ReactElement<any>[];\n};\n\nexport const HStack: React.FC<HStackProps> = ({\n  background = UIColor.transparent,\n  spacing,\n  alignment = Alignments.vertical.center,\n  cornerRadius = 0,\n  padding,\n  frame,\n  children,\n}) => {\n  const { colorScheme } = useColorScheme();\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        justifyContent: 'center',\n        backgroundColor: systemColor(background, colorScheme),\n        borderRadius: cornerRadius,\n        alignItems: Alignments.vertical[alignment] as FlexAlignType,\n        ...getFrame(frame),\n        ...getPadding(padding),\n      }}\n    >\n      {spacing && spacing !== 0\n        ? React.Children.map(children, (child) => (\n            <>\n              <View style={{ width: spacing }} />\n              {child}\n              <View style={{ width: spacing }} />\n            </>\n          ))\n        : children}\n    </View>\n  );\n};\n","import React from \"react\";\nimport { HStack } from \"../HStack\";\nimport { Image } from \"../Image\";\nimport { Text, TextProps } from \"../Text\";\n\ntype LabelProps = {\n  text?: string;\n  systemName?: string;\n  icon?: React.ReactElement;\n  children?: React.ReactElement<TextProps>;\n};\n\nexport const Label = ({ text, systemName, icon }: LabelProps) => {\n  return (\n    <HStack>\n      <Text>{text}</Text>\n      {icon ? icon : <Image systemName={systemName} />}\n    </HStack>\n  );\n};\n","import React from 'react';\nimport { Switch } from 'react-native';\nimport { useColorScheme } from '../../hooks/useColorScheme';\nimport { systemColor } from '../../utils/colors';\n\ntype ToggleProps = {\n  isOn: boolean;\n  onColor?: string;\n  offColor?: string;\n  onToggle: () => void;\n};\n\nexport const Toggle: React.FC<ToggleProps> = ({\n  isOn,\n  onColor,\n  offColor,\n  onToggle,\n}) => {\n  const { colorScheme } = useColorScheme();\n  return (\n    <Switch\n      value={isOn}\n      onValueChange={onToggle}\n      trackColor={{ true: systemColor(onColor, colorScheme), false: null }}\n      ios_backgroundColor={systemColor(offColor, colorScheme)}\n    />\n  );\n};\n","import React from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport { useColorScheme } from '../../hooks/useColorScheme';\nimport { systemColor, UIColor } from '../../utils/colors';\n\ntype StepperProps = {\n  onIncrement: () => void;\n  onDecrement: () => void;\n};\n\n// TODO: use tap gesture handler to animate buttons\nexport const Stepper: React.FC<StepperProps> = ({\n  onIncrement,\n  onDecrement,\n}) => {\n  const { colorScheme } = useColorScheme();\n  return (\n    <View\n      style={[\n        styles.container,\n        { backgroundColor: systemColor(UIColor.systemGray6, colorScheme) },\n      ]}\n    >\n      <Animated.View style={styles.button}>\n        <Button onPress={() => onDecrement} title='-' />\n      </Animated.View>\n      <View\n        style={[\n          styles.divider,\n          { borderRightColor: systemColor(UIColor.systemGray4, colorScheme) },\n        ]}\n      />\n      <Animated.View style={styles.button}>\n        <Button onPress={() => onIncrement} title='+' />\n      </Animated.View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 6,\n    flexDirection: 'row',\n    padding: 3,\n    width: 100,\n  },\n  divider: {\n    top: 5,\n    height: 15,\n    borderRightWidth: 1,\n    width: 0,\n  },\n  button: {\n    width: '50%',\n  },\n});\n","export const SLIDER_WIDTH = 300;\nexport const SLIDER_HEIGHT = 3;\nexport const CIRCLE_WIDTH = 25;\n","import React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport { systemColor, UIColor } from '../../utils/colors';\nimport { CIRCLE_WIDTH, SLIDER_WIDTH } from './Constants';\n\ntype CursorProps = {\n  translateX: Animated.Value<number>;\n  gestureHandler: {\n    onHandlerStateChange: () => void;\n    onGestureEvent: () => void;\n  };\n};\n\nexport const Cursor: React.FC<CursorProps> = ({\n  translateX,\n  gestureHandler,\n}) => {\n  return (\n    <PanGestureHandler {...gestureHandler}>\n      <Animated.View\n        style={[\n          styles.cursor,\n          {\n            left: SLIDER_WIDTH / 2 - CIRCLE_WIDTH / 2,\n            top: -CIRCLE_WIDTH / 2,\n            height: CIRCLE_WIDTH,\n            width: CIRCLE_WIDTH,\n            transform: [{ translateX }],\n          },\n        ]}\n      />\n    </PanGestureHandler>\n  );\n};\n\nconst styles = StyleSheet.create({\n  cursor: {\n    position: 'absolute',\n    borderRadius: 100,\n    backgroundColor: systemColor(UIColor.white),\n    shadowColor: systemColor(UIColor.black),\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 3,\n  },\n});\n","import React from 'react';\nimport Animated from 'react-native-reanimated';\nimport { useColorScheme } from '../../hooks/useColorScheme';\nimport { systemColor } from '../../utils/colors';\nimport { SLIDER_HEIGHT } from './Constants';\n\ntype FillBarProps = {\n  fillWidth: Animated.Node<number>;\n  color: string;\n};\n\nexport const FillBar: React.FC<FillBarProps> = ({ fillWidth, color }) => {\n  const { colorScheme } = useColorScheme();\n  return (\n    <Animated.View\n      style={{\n        backgroundColor: systemColor(color, colorScheme),\n        height: SLIDER_HEIGHT,\n        width: fillWidth,\n        borderRadius: 10,\n      }}\n    />\n  );\n};\n","import React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { State } from 'react-native-gesture-handler';\nimport Animated, {\n  add,\n  call,\n  cond,\n  divide,\n  eq,\n  interpolate,\n  not,\n  set,\n  sub,\n  useCode,\n  useValue,\n} from 'react-native-reanimated';\nimport { clamp, onGestureEvent } from 'react-native-redash/lib/module/v1';\nimport { useColorScheme } from '../../hooks/useColorScheme';\nimport { systemColor, UIColor } from '../../utils/colors';\nimport { CIRCLE_WIDTH, SLIDER_HEIGHT, SLIDER_WIDTH } from './Constants';\nimport { Cursor } from './Cursor';\nimport { FillBar } from './FillBar';\n\ntype SliderProps = {\n  color?: string;\n  step?: number;\n  range?: [number, number];\n  value: number;\n  onSlide: (n: number) => void;\n};\n\nexport const Slider: React.FC<SliderProps> = ({\n  color = UIColor.systemBlue,\n  range = [0, 10],\n  step = 1,\n  value,\n  onSlide,\n}) => {\n  const { colorScheme } = useColorScheme();\n  const [from, through] = range;\n  const midPoint = (through + from) / 2;\n\n  const translationX = useValue(0);\n  const velocityX = useValue(0);\n  const state = useValue(State.UNDETERMINED);\n  const offset = useValue(0);\n  const start = useValue(0);\n  const dragging = useValue(0);\n  const position = useValue(0);\n  const init = useValue(0);\n  const valueVal = useValue(value);\n  const midpointVal = useValue(midPoint);\n  const fromVal = useValue(from);\n  const sliderWidthVal = useValue(SLIDER_WIDTH);\n\n  const gestureHandler = onGestureEvent({\n    state,\n    translationX,\n    velocityX,\n    offset,\n  });\n\n  const translateX = clamp(\n    [\n      cond(not(init), [\n        set(\n          position,\n          divide(\n            sub(valueVal, midpointVal),\n            divide(sub(midpointVal, fromVal), divide(sliderWidthVal, 2))\n          )\n        ),\n        set(init, 1),\n      ]),\n      cond(\n        eq(state, State.ACTIVE),\n        [\n          cond(eq(dragging, 0), [set(dragging, 1), set(start, position)]),\n          set(position, add(start, translationX)),\n        ],\n        [set(dragging, 0), position]\n      ),\n    ],\n    -SLIDER_WIDTH / 2,\n    SLIDER_WIDTH / 2\n  );\n\n  const fillWidth = interpolate(translateX, {\n    inputRange: [-SLIDER_WIDTH / 2, SLIDER_WIDTH / 2],\n    outputRange: [0, SLIDER_WIDTH],\n  });\n\n  useCode(() => {\n    return call([translateX], (translateX) => {\n      const slope = (midPoint - from) / (SLIDER_WIDTH / 2);\n      let newValue =\n        Math.round((midPoint + translateX[0] * slope) / step) * step;\n      if (!Number.isInteger(step))\n        newValue = parseFloat(\n          newValue.toFixed(step.toString().split('.')[1].length)\n        );\n      onSlide(newValue);\n    });\n  }, [translateX]);\n\n  return (\n    <Animated.View\n      style={[\n        styles.slider,\n        {\n          width: SLIDER_WIDTH,\n          height: SLIDER_HEIGHT,\n          marginTop: CIRCLE_WIDTH / 2,\n          marginBottom: CIRCLE_WIDTH / 2,\n          backgroundColor: systemColor(UIColor.systemGray5, colorScheme),\n        },\n      ]}\n    >\n      <FillBar fillWidth={fillWidth} color={color} />\n      <Cursor translateX={translateX} gestureHandler={gestureHandler} />\n    </Animated.View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  slider: {\n    flexDirection: 'row',\n    borderRadius: 10,\n  },\n});\n","import React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { useColorScheme } from '../../hooks/useColorScheme';\nimport { systemColor, UIColor } from '../../utils/colors';\nimport { Frame } from '../../types/propTypes';\n\ntype RoundedRectangleProps = {\n  fill: string;\n  frame: Frame;\n  cornerRadius?: number;\n};\n\nconst DEFAULT_RECT_SIZE = 20;\n\nexport const RoundedRectangle: React.FC<RoundedRectangleProps> = ({\n  fill = UIColor.white,\n  frame = { width: DEFAULT_RECT_SIZE, height: DEFAULT_RECT_SIZE },\n}) => {\n  const { colorScheme } = useColorScheme();\n  return (\n    <View\n      style={[\n        styles.rect,\n        {\n          backgroundColor: systemColor(fill, colorScheme),\n          borderColor: systemColor(UIColor.systemGray5, colorScheme),\n          width: frame.width,\n          height: frame.height,\n        },\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  rect: {\n    borderRadius: 3,\n    borderWidth: 0.5,\n  },\n});\n","// Wheel\nexport const WHEEL_ITEM_HEIGHT = 32;\nexport const WHEEL_VISIBLE_ITEMS = 5;\nexport const WHEEL_PERSPECTIVE = 600;\n// List\nexport const LIST_ICON_WIDTH = 15;\n// Slide\nexport const SLIDE_TEXT_SIZE = 14;\n","/*\n * Thank you @William Candillon for this awesome example found here:\n * https://github.com/wcandillon/can-it-be-done-in-react-native/tree/31496696939aa94094e8ec499b113facc4e94e56/the-10-min/src/Picker\n */\n\nimport Animated, {\n  Clock,\n  Value,\n  add,\n  block,\n  cond,\n  eq,\n  set,\n  startClock,\n  and,\n  not,\n  clockRunning,\n  timing,\n  Easing,\n  stopClock,\n} from 'react-native-reanimated';\nimport { State } from 'react-native-gesture-handler';\nimport { snapPoint } from 'react-native-redash/lib/module/v1';\n\ninterface WithDecayParams {\n  value: Animated.Adaptable<number>;\n  velocity: Animated.Adaptable<number>;\n  state: Animated.Node<State>;\n  offset: Animated.Value<number>;\n  snapPoints: number[];\n}\n\nexport const withDecay = (params: WithDecayParams) => {\n  const { value, velocity, state: gestureState, offset, snapPoints } = {\n    ...params,\n  };\n  const init = new Value(0);\n  const clock = new Clock();\n  const state = {\n    finished: new Value(0),\n    position: new Value(0),\n    time: new Value(0),\n    frameTime: new Value(0),\n  };\n  const config = {\n    toValue: new Value(0),\n    duration: new Value(1000),\n    easing: Easing.bezier(0.22, 1, 0.36, 1),\n  };\n  return block([\n    cond(not(init), [set(state.position, offset), set(init, 1)]),\n    cond(eq(gestureState, State.BEGAN), set(offset, state.position)),\n    cond(eq(gestureState, State.ACTIVE), [\n      set(state.position, add(offset, value)),\n      set(state.time, 0),\n      set(state.frameTime, 0),\n      set(state.finished, 0),\n      set(config.toValue, snapPoint(state.position, velocity, snapPoints)),\n    ]),\n    cond(and(not(state.finished), eq(gestureState, State.END)), [\n      cond(not(clockRunning(clock)), [startClock(clock)]),\n      timing(clock, state, config),\n      cond(state.finished, stopClock(clock)),\n    ]),\n    state.position,\n  ]);\n};\n\nexport const clamp = (value: number, lowerBound: number, upperBound: number) =>\n  Math.min(Math.max(lowerBound, value), upperBound);\n","/*\n * Thank you @William Candillon for this awesome example found here:\n * https://github.com/wcandillon/can-it-be-done-in-react-native/tree/31496696939aa94094e8ec499b113facc4e94e56/the-10-min/src/Picker\n */\n\nimport React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport Animated, {\n  useCode,\n  set,\n  Value,\n  add,\n  call,\n} from \"react-native-reanimated\";\nimport { PanGestureHandler } from \"react-native-gesture-handler\";\nimport { usePanGestureHandler } from \"react-native-redash/lib/module/v1\";\n\nimport { WHEEL_ITEM_HEIGHT } from \"../Constants\";\nimport { withDecay } from \"../AnimationHelpers\";\n\ntype GestureHandlerProps = {\n  value: Animated.Value<number>;\n  max: number;\n  onSelect: (n: number) => void;\n  selection: number;\n};\n\nconst GestureHandler = ({\n  value,\n  max,\n  onSelect,\n  selection,\n}: GestureHandlerProps) => {\n  const {\n    gestureHandler,\n    translation,\n    velocity,\n    state,\n  } = usePanGestureHandler();\n  const snapPoints = new Array(max)\n    .fill(0)\n    .map((_, i) => i * -WHEEL_ITEM_HEIGHT);\n  const translateY = withDecay({\n    value: translation.y,\n    velocity: velocity.y,\n    state,\n    snapPoints,\n    offset: new Value(selection * -WHEEL_ITEM_HEIGHT),\n  });\n  useCode(() => {\n    return [\n      set(value, add(translateY, WHEEL_ITEM_HEIGHT * 2)),\n      call([value], ([value]) => {\n        if (value % WHEEL_ITEM_HEIGHT === 0) {\n          // Haptic feedback goes here\n          const midPoint = Math.floor(max / 2);\n          const newSelection = max - (value / WHEEL_ITEM_HEIGHT + midPoint) - 1;\n          onSelect(newSelection);\n        }\n      }),\n    ];\n  }, []);\n\n  return (\n    <PanGestureHandler {...gestureHandler}>\n      <Animated.View style={StyleSheet.absoluteFill} />\n    </PanGestureHandler>\n  );\n};\n\nexport default GestureHandler;\n","/*\n * Thank you @William Candillon for this awesome example found here:\n * https://github.com/wcandillon/can-it-be-done-in-react-native/tree/31496696939aa94094e8ec499b113facc4e94e56/the-10-min/src/Picker\n */\n\nimport React from 'react';\nimport { View, StyleSheet, Text } from 'react-native';\nimport Animated, {\n  interpolate,\n  Extrapolate,\n  multiply,\n  cos,\n  sub,\n  asin,\n  divide,\n} from 'react-native-reanimated';\nimport { useValue, translateZ } from 'react-native-redash/lib/module/v1';\nimport MaskedView from '@react-native-community/masked-view';\nimport GestureHandler from './WheelGestureHandler';\nimport {\n  WHEEL_VISIBLE_ITEMS,\n  WHEEL_ITEM_HEIGHT,\n  WHEEL_PERSPECTIVE,\n} from '../Constants';\nimport { systemColor, UIColor } from '../../../utils/colors';\nimport { WheelPickerProps } from '../Picker';\nimport { useColorScheme } from '../../../hooks/useColorScheme';\n\nconst RADIUS_REL = WHEEL_VISIBLE_ITEMS * 0.5;\nconst RADIUS = RADIUS_REL * WHEEL_ITEM_HEIGHT;\n\nexport const WheelPicker = ({\n  items,\n  background,\n  selection,\n  onSelect,\n}: WheelPickerProps) => {\n  const translateY = useValue(0);\n  const { colorScheme } = useColorScheme();\n\n  const maskElement = (\n    <Animated.View style={{ transform: [{ translateY }] }}>\n      {items.map((v, i) => {\n        const interpolationValue = divide(\n          sub(translateY, WHEEL_ITEM_HEIGHT * 2),\n          -WHEEL_ITEM_HEIGHT\n        );\n        const y = interpolate(interpolationValue, {\n          inputRange: [i - RADIUS_REL, i, i + RADIUS_REL],\n          outputRange: [-1, 0, 1],\n          extrapolate: Extrapolate.CLAMP,\n        });\n        const rotateX = asin(y);\n        const z = sub(multiply(RADIUS, cos(rotateX)), RADIUS);\n        const opacity = interpolate(interpolationValue, {\n          inputRange: [i - RADIUS_REL, i, i + RADIUS_REL],\n          outputRange: [0.3, 1, 0.3],\n          extrapolate: Extrapolate.CLAMP,\n        });\n        return (\n          <Animated.View\n            key={i}\n            style={[\n              styles.item,\n              {\n                opacity,\n                transform: [\n                  { perspective: WHEEL_PERSPECTIVE },\n                  { rotateX },\n                  translateZ(WHEEL_PERSPECTIVE, z),\n                ],\n              },\n            ]}\n          >\n            <Text style={styles.label}>{v}</Text>\n          </Animated.View>\n        );\n      })}\n    </Animated.View>\n  );\n  return (\n    <>\n      <View\n        style={[\n          styles.selected,\n          { backgroundColor: systemColor(UIColor.systemGray6, colorScheme) },\n        ]}\n      />\n      <View style={styles.container}>\n        <MaskedView {...{ maskElement }}>\n          <View\n            style={{\n              height: WHEEL_ITEM_HEIGHT * 2,\n              backgroundColor: systemColor(UIColor.systemGray3, colorScheme),\n            }}\n          />\n          <View\n            style={{\n              height: WHEEL_ITEM_HEIGHT,\n              backgroundColor: systemColor(UIColor.black, colorScheme),\n            }}\n          />\n          <View\n            style={{\n              height: WHEEL_ITEM_HEIGHT * 2,\n              backgroundColor: systemColor(UIColor.systemGray3, colorScheme),\n            }}\n          />\n        </MaskedView>\n        <View style={StyleSheet.absoluteFill}>\n          <View\n            style={{\n              borderColor: systemColor(UIColor.systemGray4, colorScheme),\n              top: WHEEL_ITEM_HEIGHT * 2,\n              height: WHEEL_ITEM_HEIGHT,\n              borderRadius: 6,\n            }}\n          />\n        </View>\n        <GestureHandler\n          max={items.length}\n          value={translateY}\n          onSelect={onSelect}\n          selection={selection}\n        />\n      </View>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  selected: {\n    position: 'absolute',\n    height: WHEEL_ITEM_HEIGHT,\n    width: '90%',\n    borderRadius: 6,\n  },\n  container: {\n    width: '90%',\n    overflow: 'hidden',\n  },\n  item: {\n    height: WHEEL_ITEM_HEIGHT,\n    justifyContent: 'center',\n  },\n  label: {\n    color: 'white',\n    fontSize: 24,\n    lineHeight: WHEEL_ITEM_HEIGHT,\n    textAlign: 'center',\n    textAlignVertical: 'center',\n  },\n});\n","import React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { systemColor, UIColor } from '../../../utils/colors';\n\nconst height = 2.5;\nconst shortWidth = 8;\nconst longWidth = 16;\nconst borderRadius = 10;\n\nexport const CheckMark: React.FC = () => {\n  return (\n    <View style={styles.container}>\n      <View style={[styles.arm, styles.short]} />\n      <View style={[styles.arm, styles.long]} />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n  },\n  arm: {\n    height,\n    backgroundColor: systemColor(UIColor.systemBlue),\n    borderRadius,\n  },\n  short: {\n    width: shortWidth,\n    transform: [{ translateY: 5 }, { rotate: '45deg' }],\n  },\n  long: {\n    width: longWidth,\n    transform: [{ translateX: 3 }, { rotate: '-45deg' }],\n  },\n});\n","import React from 'react';\nimport { UIColor } from '../../../utils/colors';\nimport { Button } from '../../Button';\nimport { HStack } from '../../HStack';\nimport { List } from '../../List';\nimport { Spacer } from '../../Spacer';\nimport { Text } from '../../Text';\nimport { ListPickerProps } from '../Picker';\nimport { CheckMark } from './CheckMark';\n\nexport const ListPicker = ({\n  items,\n  onSelect,\n  selection,\n  pickerStyle,\n  background = UIColor.white,\n}: ListPickerProps) => {\n  return (\n    <List listStyle={pickerStyle} background={background}>\n      {items.map((item, i) => (\n        <Button key={i} action={() => onSelect(i)}>\n          <HStack>\n            <Text>{item}</Text>\n            <Spacer />\n            {selection === i ? <CheckMark /> : null}\n          </HStack>\n        </Button>\n      ))}\n    </List>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Text } from '../../Text';\nimport { systemColor, UIColor } from '../../../utils/colors';\nimport {\n  Animated,\n  Easing,\n  StyleSheet,\n  TouchableOpacity,\n  View,\n} from 'react-native';\nimport { SegmentedPickerProps } from '../Picker';\nimport { SLIDE_TEXT_SIZE } from '../Constants';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport { clamp } from '../AnimationHelpers';\nimport { useColorScheme } from '../../../hooks/useColorScheme';\n\nconst { Value, timing } = Animated;\n\nexport const SegmentedPicker = ({\n  items,\n  selection,\n  onSelect,\n}: SegmentedPickerProps) => {\n  const [dimensions, setDimensions] = useState(null);\n  const translateX = useState(new Value(0))[0];\n  const opacities = items.map(() => new Value(0));\n\n  useEffect(() => {\n    if (dimensions) {\n      let to = (dimensions.width / items.length) * selection;\n      if (selection === 0) to += 2;\n      if (selection === items.length - 1) to -= 2;\n      slide(to);\n      setOpacities();\n    }\n  }, [dimensions, selection]);\n\n  const setOpacities = () => {\n    items.forEach((_, i) => {\n      if (i === selection || i === selection - 1 || i === items.length - 1)\n        opacities[i].setValue(0);\n      else opacities[i].setValue(1);\n    });\n  };\n\n  const slide = (slideValue: number) => {\n    timing(translateX, {\n      toValue: slideValue,\n      duration: 200,\n      easing: Easing.inOut(Easing.ease),\n      useNativeDriver: true,\n    }).start();\n  };\n\n  let lastIndex = selection;\n  const panGestureHandler = (e) => {\n    const currentXPos = e.nativeEvent.x;\n    const itemWidth = dimensions.width / items.length;\n    const slideTo = clamp(\n      Math.round((currentXPos - itemWidth / 2) / itemWidth) * itemWidth,\n      0,\n      (items.length - 1) * itemWidth\n    );\n    const selectedIndex = slideTo / itemWidth;\n    if (selectedIndex !== lastIndex) {\n      lastIndex = selectedIndex;\n      onSelect(selectedIndex);\n    }\n  };\n\n  const { colorScheme } = useColorScheme();\n  const sliderBackgroundColor =\n    colorScheme === 'light' ? UIColor.white : UIColor.systemGray3;\n\n  return (\n    <PanGestureHandler onGestureEvent={panGestureHandler}>\n      <View\n        style={[\n          styles.container,\n          { backgroundColor: systemColor(UIColor.systemGray6, colorScheme) },\n        ]}\n        onLayout={(e) => setDimensions(e.nativeEvent.layout)}\n      >\n        {items.length &&\n          items.map((item, i) => (\n            <React.Fragment key={i}>\n              <TouchableOpacity\n                style={[\n                  styles.item,\n                  {\n                    flexBasis: `${100 / items.length}%`,\n                  },\n                ]}\n                onPress={() => onSelect(i)}\n                key={i}\n              >\n                <Text\n                  fontSize={SLIDE_TEXT_SIZE}\n                  fontWeight={selection === i ? 'bold' : 'normal'}\n                  foregroundColor={systemColor(UIColor.black, colorScheme)}\n                >\n                  {item}\n                </Text>\n              </TouchableOpacity>\n              <Animated.View\n                style={[\n                  styles.divider,\n                  {\n                    opacity: opacities[i],\n                    borderRightColor: systemColor(\n                      UIColor.systemGray4,\n                      colorScheme\n                    ),\n                  },\n                ]}\n              />\n            </React.Fragment>\n          ))}\n\n        <Animated.View\n          style={[\n            styles.slider,\n            {\n              backgroundColor: systemColor(sliderBackgroundColor, colorScheme),\n              width: dimensions ? dimensions.width / items.length : 0,\n              height: dimensions ? dimensions.height - 5 : 0,\n              transform: [\n                {\n                  translateX: translateX,\n                },\n              ],\n            },\n          ]}\n        />\n      </View>\n    </PanGestureHandler>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '90%',\n    borderRadius: 6,\n    flexDirection: 'row',\n    padding: 3,\n  },\n  slider: {\n    position: 'absolute',\n    top: 2,\n    zIndex: -1,\n    borderRadius: 6,\n    shadowColor: systemColor(UIColor.black),\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 3,\n  },\n  divider: {\n    top: 5,\n    height: 15,\n    borderRightWidth: 1,\n    width: 0,\n  },\n  item: {\n    justifyContent: 'center',\n    paddingVertical: 5,\n    paddingHorizontal: 20,\n  },\n});\n","import React from 'react';\nimport { WheelPicker } from './Wheel';\nimport { ListPicker } from './List';\nimport { SegmentedPicker } from './Segmented';\n\ntype PickerProps = {\n  background: string;\n  items: Array<any>;\n  selection?: number;\n  onSelect: (n: number) => void;\n};\n\nexport type WheelPickerProps = PickerProps & {\n  pickerStyle: 'wheel';\n};\n\nexport type SegmentedPickerProps = PickerProps & {\n  pickerStyle: 'segmented';\n};\n\nexport type ListPickerProps = PickerProps & {\n  pickerStyle: 'insetGrouped' | 'grouped';\n};\n\nexport const Picker = (\n  props: ListPickerProps | WheelPickerProps | SegmentedPickerProps\n) => {\n  switch (props.pickerStyle) {\n    case 'insetGrouped':\n    case 'grouped':\n      return <ListPicker {...props} />;\n    case 'wheel':\n      return <WheelPicker {...props} />;\n    case 'segmented':\n      return <SegmentedPicker {...props} />;\n    default:\n      return <WheelPicker {...props} />;\n  }\n};\n","import React from 'react';\nimport { TextInput } from 'react-native';\nimport { TextFieldProps } from './TextField';\n\nexport const PlainTextField: React.FC<TextFieldProps> = ({\n  placeholder,\n  text,\n  onChangeText,\n  frame = { width: null, height: null },\n}) => {\n  return (\n    <TextInput\n      style={{\n        width: frame.width,\n        height: frame.height,\n      }}\n      placeholder={placeholder}\n      value={text}\n      onChangeText={onChangeText}\n    />\n  );\n};\n","import React from 'react';\nimport { systemColor, UIColor } from '../../utils/colors';\nimport { TextFieldProps } from './TextField';\nimport { StyleSheet, TextInput } from 'react-native';\nimport { useColorScheme } from '../../hooks/useColorScheme';\n\nexport const RoundedBorderTextField: React.FC<TextFieldProps> = ({\n  placeholder,\n  text,\n  onChangeText,\n  frame = { width: null, height: null },\n}) => {\n  const { colorScheme } = useColorScheme();\n  return (\n    <TextInput\n      style={[\n        styles.input,\n        {\n          width: frame.width,\n          height: frame.height,\n          backgroundColor: systemColor(UIColor.systemGray6, colorScheme),\n          color: systemColor(UIColor.black, colorScheme),\n        },\n      ]}\n      placeholder={placeholder}\n      value={text}\n      onChangeText={onChangeText}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  input: {\n    borderRadius: 6,\n    paddingHorizontal: 10,\n    paddingVertical: 7,\n  },\n});\n","import React, { useEffect, useState } from 'react';\nimport { systemColor, UIColor } from '../../utils/colors';\nimport { Animated, Easing, TextInput, StyleSheet } from 'react-native';\nimport { TextFieldProps } from './TextField';\nimport { useColorScheme } from '../../hooks/useColorScheme';\n\nconst { timing, Value } = Animated;\n\nexport const AnimatedTextField: React.FC<TextFieldProps> = ({\n  placeholder,\n  text,\n  onChangeText,\n  frame = { width: null, height: null },\n}) => {\n  const translateY = useState(new Value(0))[0];\n  const opacity = useState(new Value(0))[0];\n\n  const animatePlaceholder = () => {\n    const translateYTo = text === '' ? 20 : 0;\n    const opacityTo = text === '' ? 0 : 1;\n    timing(translateY, {\n      toValue: translateYTo,\n      duration: 200,\n      easing: Easing.ease,\n      useNativeDriver: true,\n    }).start();\n    timing(opacity, {\n      toValue: opacityTo,\n      duration: 150,\n      easing: Easing.ease,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  useEffect(() => {\n    if (text.length === 1 || text.length === 0) {\n      animatePlaceholder();\n    }\n  }, [text]);\n\n  const { colorScheme } = useColorScheme();\n\n  return (\n    <>\n      <Animated.Text\n        style={[\n          styles.text,\n          {\n            transform: [{ translateY }],\n            opacity: opacity,\n            color: systemColor(UIColor.systemGray3, colorScheme),\n          },\n        ]}\n      >\n        {placeholder}\n      </Animated.Text>\n      <TextInput\n        placeholder={placeholder}\n        value={text}\n        onChangeText={onChangeText}\n        style={[\n          styles.input,\n          {\n            width: frame.width,\n            height: frame.height,\n            borderBottomColor: systemColor(UIColor.systemGray3, colorScheme),\n          },\n        ]}\n      />\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  input: {\n    borderBottomWidth: StyleSheet.hairlineWidth * 1.2,\n    paddingTop: 20,\n    paddingBottom: 10,\n    fontSize: 18,\n  },\n  text: {\n    position: 'absolute',\n    left: 20,\n    fontSize: 16,\n  },\n});\n","import React from 'react';\nimport { Frame } from '../../types/propTypes';\nimport { PlainTextField } from './PlainTextField';\nimport { RoundedBorderTextField } from './RoundedBorderTextField';\nimport { AnimatedTextField } from './AnimatedTextField';\n\nexport type TextFieldProps = {\n  placeholder?: string;\n  text: string;\n  onChangeText: () => void;\n  frame?: Frame;\n  textFieldStyle?: 'animated' | 'plain' | 'rounded-border';\n  background?: string;\n  foregroundColor?: string;\n};\n\nexport const TextField: React.FC<TextFieldProps> = (props) => {\n  switch (props.textFieldStyle) {\n    case 'animated':\n      return <AnimatedTextField {...props} />;\n    case 'plain':\n      return <PlainTextField {...props} />;\n    case 'rounded-border':\n      return <RoundedBorderTextField {...props} />;\n    default:\n      return <PlainTextField {...props} />;\n  }\n};\n","import React from 'react';\nimport { StyleSheet } from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport { systemColor, UIColor } from '../../utils/colors';\n\ntype BackgroundShadowProps = {\n  shadowOpacity: Animated.Node<number>;\n};\n\nexport const BackgroundShadow: React.FC<BackgroundShadowProps> = ({\n  shadowOpacity,\n  children,\n}) => {\n  return (\n    <Animated.View\n      pointerEvents='none'\n      style={[\n        StyleSheet.absoluteFill,\n        {\n          opacity: shadowOpacity,\n          backgroundColor: systemColor(UIColor.black),\n        },\n      ]}\n    >\n      {children}\n    </Animated.View>\n  );\n};\n","export const PEAKING_HEIGHT = 35;\nexport const HEADER_TOP = 15;\nexport const HEADER_WIDTH = 38;\nexport const HEADER_HEIGHT = 6;\nexport const CONFIG = {\n  damping: 30,\n  mass: 1,\n  stiffness: 250,\n  overshootClamping: false,\n  restSpeedThreshold: 0.1,\n  restDisplacementThreshold: 0.1,\n};\n","import React from 'react';\nimport { StyleSheet } from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport { HEADER_TOP, PEAKING_HEIGHT } from './Constants';\n\ntype ContentProps = {\n  contentOpacity: Animated.Node<number>;\n  content: React.ReactNode;\n};\n\nexport const Content: React.FC<ContentProps> = ({\n  contentOpacity,\n  content,\n}) => {\n  return (\n    <Animated.View\n      style={[\n        StyleSheet.absoluteFill,\n        { top: PEAKING_HEIGHT + HEADER_TOP, opacity: contentOpacity },\n      ]}\n    >\n      {content}\n    </Animated.View>\n  );\n};\n","import React from 'react';\nimport Animated from 'react-native-reanimated';\nimport { systemColor, UIColor } from '../../utils/colors';\nimport { Text } from '../Text';\nimport { HEADER_TOP, PEAKING_HEIGHT } from './Constants';\n\ntype HeaderProps = {\n  header: string;\n};\n\nexport const Header: React.FC<HeaderProps> = ({ header }) => {\n  return (\n    <Animated.View\n      style={{\n        position: 'absolute',\n        top: HEADER_TOP,\n        borderBottomColor: systemColor(UIColor.transparent),\n        width: '100%',\n        height: PEAKING_HEIGHT,\n      }}\n    >\n      <Text\n        alignment='leading'\n        fontWeight='bold'\n        padding={{ leading: HEADER_TOP, bottom: HEADER_TOP }}\n      >\n        {header}\n      </Text>\n    </Animated.View>\n  );\n};\n","import React from 'react';\nimport { View } from 'react-native';\nimport { useColorScheme } from '../../hooks/useColorScheme';\nimport { systemColor, UIColor } from '../../utils/colors';\nimport { HEADER_HEIGHT, HEADER_WIDTH } from './Constants';\n\ntype PullLineProps = {\n  width: number;\n};\n\nexport const PullLine = ({ width }: PullLineProps) => {\n  const left = width / 2 - HEADER_WIDTH / 2;\n  const { colorScheme } = useColorScheme();\n  return (\n    <View\n      style={{\n        position: 'absolute',\n        top: HEADER_HEIGHT,\n        left,\n        height: HEADER_HEIGHT,\n        width: HEADER_WIDTH,\n        backgroundColor: systemColor(UIColor.systemGray3, colorScheme),\n        borderRadius: 10,\n      }}\n    />\n  );\n};\n","import React from 'react';\nimport { Dimensions, StyleSheet } from 'react-native';\nimport { PanGestureHandler, State } from 'react-native-gesture-handler';\nimport Animated, { interpolate, useValue } from 'react-native-reanimated';\nimport {\n  withSpring,\n  onGestureEvent,\n  clamp,\n} from 'react-native-redash/lib/module/v1';\nimport { useColorScheme } from '../../hooks/useColorScheme';\nimport { systemColor, UIColor } from '../../utils/colors';\nimport { BackgroundShadow } from './BackgroundShadow';\nimport { PEAKING_HEIGHT, CONFIG } from './Constants';\nimport { Content } from './Content';\nimport { Header } from './Header';\nimport { PullLine } from './PullLine';\n\ntype BottomSheetProps = {\n  background?: string;\n  opacity?: number;\n  header?: string;\n  snapPoints?: string[];\n  // isPresented?: boolean;\n};\n\nconst { width, height } = Dimensions.get('screen');\nconst SNAP_THREE_QUARTER = height / 4;\nconst SNAP_HALF = height / 2 + PEAKING_HEIGHT;\nconst SNAP_QUARTER = (3 * height) / 4;\nconst SNAP_BOTTOM = height - PEAKING_HEIGHT;\n\nconst snapMap = {\n  bottom: SNAP_BOTTOM,\n  quarter: SNAP_QUARTER,\n  half: SNAP_HALF,\n  'three-quarter': SNAP_THREE_QUARTER,\n  full: PEAKING_HEIGHT,\n};\n\nexport const BottomSheet: React.FC<BottomSheetProps> = ({\n  background = UIColor.white,\n  opacity,\n  header,\n  snapPoints,\n  // isPresented = false,\n  children,\n}) => {\n  const translationY = useValue(0);\n  const velocityY = useValue(0);\n  const state = useValue(State.UNDETERMINED);\n  const offset = useValue(SNAP_BOTTOM);\n\n  const { colorScheme } = useColorScheme();\n\n  // Defaults to bottom and three-quarters\n  const snaps = snapPoints\n    ? [...snapPoints.map((s) => snapMap[s]), snapMap.bottom]\n    : [snapMap.bottom, snapMap['three-quarter']];\n\n  const gestureHandler = onGestureEvent({\n    state,\n    translationY,\n    velocityY,\n  });\n\n  const translateY = clamp(\n    withSpring({\n      value: translationY,\n      velocity: velocityY,\n      offset,\n      state,\n      snapPoints: snaps,\n      config: CONFIG,\n    }),\n    Math.min(...snaps) - PEAKING_HEIGHT,\n    SNAP_BOTTOM\n  );\n\n  const shadowOpacity = interpolate(translateY, {\n    inputRange: [PEAKING_HEIGHT, SNAP_BOTTOM],\n    outputRange: [0.5, 0],\n  });\n\n  const contentOpacity = interpolate(translateY, {\n    inputRange: [SNAP_QUARTER, SNAP_BOTTOM],\n    outputRange: [1, 0],\n  });\n\n  return (\n    <>\n      <BackgroundShadow shadowOpacity={shadowOpacity} />\n      <PanGestureHandler {...gestureHandler}>\n        <Animated.View\n          style={[\n            styles.bottomSheet,\n            {\n              bottom: PEAKING_HEIGHT,\n              height: height,\n              width: width,\n              backgroundColor: systemColor(background, colorScheme),\n              opacity: opacity || 1,\n              transform: [{ translateY }],\n            },\n          ]}\n        >\n          <PullLine width={width} />\n          {header && <Header header={header} />}\n          <Content content={children} contentOpacity={contentOpacity} />\n        </Animated.View>\n      </PanGestureHandler>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  bottomSheet: {\n    position: 'absolute',\n    shadowColor: systemColor(UIColor.black),\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 3,\n    borderTopRightRadius: 10,\n    borderTopLeftRadius: 10,\n  },\n});\n","import React from 'react';\nimport { Frame, Padding, HorizontalAlignment } from '../../types/propTypes';\nimport { systemColor, UIColor } from '../../utils/colors';\nimport { FlexAlignType, View } from 'react-native';\nimport { getPadding } from '../../utils/padding';\nimport { Alignments } from '../../utils/alignments';\nimport { getFrame } from '../../utils/frame';\nimport { useColorScheme } from '../../hooks/useColorScheme';\n\ntype VStackProps = {\n  background?: string;\n  alignment?: HorizontalAlignment;\n  padding?: Padding;\n  spacing?: number;\n  width?: number;\n  frame?: Frame;\n  fillSpace?: string;\n  cornerRadius?: number;\n  children: React.ReactElement<any> | React.ReactElement<any>[];\n};\n\nexport const VStack = ({\n  background = UIColor.transparent,\n  spacing,\n  alignment = Alignments.horizontal.center as HorizontalAlignment,\n  cornerRadius = 0,\n  padding,\n  frame,\n  children,\n}: VStackProps) => {\n  const { colorScheme } = useColorScheme();\n  return (\n    <View\n      style={{\n        backgroundColor: systemColor(background, colorScheme),\n        alignItems: Alignments.horizontal[alignment] as FlexAlignType,\n        justifyContent: 'center',\n        borderRadius: cornerRadius,\n        ...getFrame(frame),\n        ...getPadding(padding),\n      }}\n    >\n      {spacing && spacing !== 0\n        ? React.Children.map(children, (child) => (\n            <>\n              <View style={{ height: spacing }} />\n              {child}\n              <View style={{ height: spacing }} />\n            </>\n          ))\n        : children}\n    </View>\n  );\n};\n","import React from 'react';\nimport {\n  VerticalAlignment,\n  HorizontalAlignment,\n  Frame,\n  Padding,\n} from '../../types/propTypes';\nimport { systemColor, UIColor } from '../../utils/colors';\nimport { View } from 'react-native';\nimport { getPadding } from '../../utils/padding';\nimport { getFrame } from '../../utils/frame';\nimport { useColorScheme } from '../../hooks/useColorScheme';\n\ntype ZStackProps = {\n  background?: string;\n  alignment?: HorizontalAlignment | VerticalAlignment;\n  padding?: Padding;\n  spacing?: number;\n  width?: number;\n  frame?: Frame;\n  cornerRadius?: number;\n  children: React.ReactElement<any> | React.ReactElement<any>[];\n};\n\nexport const ZStack = ({\n  background = UIColor.transparent,\n  cornerRadius = 0,\n  padding,\n  frame,\n  children,\n}: ZStackProps) => {\n  const { colorScheme } = useColorScheme();\n  return (\n    <View\n      style={{\n        backgroundColor: systemColor(background, colorScheme),\n        justifyContent: 'center',\n        borderRadius: cornerRadius,\n        ...getFrame(frame),\n        ...getPadding(padding),\n      }}\n    >\n      {React.Children.map(children, (child, i) =>\n        React.cloneElement(child, {\n          ...child.props,\n          style: { zIndex: i, position: 'absolute' },\n        })\n      )}\n    </View>\n  );\n};\n","import { useEffect } from 'react';\n\nexport function useOnAppear(perform: Function) {\n  useEffect(() => perform(), []);\n}\n","import { useEffect } from 'react';\n\nexport function useOnDisappear(perform: () => void) {\n  useEffect(() => perform, []);\n}\n","import { useEffect } from 'react';\nimport { Alert } from 'react-native';\n\ntype AlertButtons = {\n  text: string;\n  onPress: () => void;\n};\n\ntype AlertData = {\n  title: string;\n  message: string;\n  buttons: Array<AlertButtons>;\n};\n\nexport const useAlert = (isPresented: boolean, alert: AlertData) => {\n  useEffect(() => {\n    if (isPresented) {\n      Alert.alert(alert.title, alert.message, alert.buttons);\n    }\n  }, [isPresented]);\n};\n"],"names":["createContext","useState","useContext","RNText","RNImage","TouchableOpacity","React","View","RNScrollView","StyleSheet","Dimensions","usePanGestureHandler","useValue","useClock","snapPoint","clamp","interpolate","cond","eq","State","set","add","minus","timing","not","clockRunning","call","Animated","PanGestureHandler","Linking","Switch","Button","styles","onGestureEvent","divide","sub","Value","Clock","Easing","block","and","startClock","stopClock","Extrapolate","asin","multiply","cos","translateZ","Text","MaskedView","TextInput","width","height","withSpring"],"mappings":"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"}
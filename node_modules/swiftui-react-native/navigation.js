'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var native = require('@react-navigation/native');
var reactNative = require('react-native');
var nativeStack = require('react-native-screens/native-stack');
var reactNativeScreens = require('react-native-screens');
var bottomTabs = require('@react-navigation/bottom-tabs');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const NavigationManager = ({
  children
}) => {
  return /* @__PURE__ */ React__default['default'].createElement(native.NavigationContainer, null, children);
};

const COLOR_VALUES = {
  black: {light: "#000", dark: "#fff"},
  white: {light: "#fff", dark: "#000"},
  transparent: {light: "transparent", dark: "transparent"},
  systemBackground: {light: "#fff", dark: "#000"},
  systemRed: {light: "#ff3b30", dark: "#ff3b30"},
  systemBlue: {light: "#007bff", dark: "#0a84ff"},
  systemGreen: {light: "#34c759", dark: "#30d158"},
  systemIndigo: {light: "#5856d6", dark: "#5e5ce6"},
  systemTeal: {light: "#5ac7fa", dark: "#64d2ff"},
  systemPink: {light: "#ff2d54", dark: "#ff375f"},
  systemPurple: {light: "#af52de", dark: "#bf5af2"},
  systemOrange: {light: "#ff9500", dark: "#ff9f0a"},
  systemYellow: {light: "#ffcc00", dark: "#ffd60a"},
  systemGray: {light: "#8e8e93", dark: "#8e8e93"},
  systemGray2: {light: "#aeaeb2", dark: "#636366"},
  systemGray3: {light: "#c7c7cc", dark: "#48484a"},
  systemGray4: {light: "#d1d1d6", dark: "#3a3a3c"},
  systemGray5: {light: "#e5e5ea", dark: "#2c2c2e"},
  systemGray6: {light: "#f2f2f7", dark: "#1c1c1e"}
};
const UIColor = {
  black: "black",
  white: "white",
  transparent: "transparent",
  systemBackground: "systemBackground",
  systemRed: "systemRed",
  systemBlue: "systemBlue",
  systemGreen: "systemGreen",
  systemIndigo: "systemIndigo",
  systemTeal: "systemTeal",
  systemPink: "systemPink",
  systemPurple: "systemPurple",
  systemOrange: "systemOrange",
  systemYellow: "systemYellow",
  systemGray: "systemGray",
  systemGray2: "systemGray2",
  systemGray3: "systemGray3",
  systemGray4: "systemGray4",
  systemGray5: "systemGray5",
  systemGray6: "systemGray6"
};
const systemColor = (color, colorScheme) => {
  const colorValues = COLOR_VALUES[color];
  if (colorValues) {
    return colorScheme ? colorValues[colorScheme] : colorValues.light;
  }
  return color;
};

const height = 2.5;
const width = 10;
const borderRadius = 10;
const RightChevron = () => {
  return /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: styles.container
  }, /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: [styles.arm, styles.top]
  }), /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: [styles.arm, styles.bottom]
  }));
};
const styles = reactNative.StyleSheet.create({
  container: {
    flexDirection: "column"
  },
  arm: {
    height,
    width,
    backgroundColor: systemColor(UIColor.systemGray3),
    borderRadius
  },
  top: {
    transform: [{translateY: -height}, {rotate: "45deg"}]
  },
  bottom: {
    transform: [{rotate: "-45deg"}]
  }
});

const NavigationLink = ({
  navigation,
  destination,
  distinationProps,
  children,
  text,
  foregroundColor,
  listItem
}) => {
  const defaultForegroundColor = listItem ? systemColor(UIColor.black, "light") : systemColor(UIColor.systemBlue, "light");
  if (listItem) {
    return /* @__PURE__ */ React__default['default'].createElement(reactNative.TouchableOpacity, {
      onPress: () => navigation.navigate(destination, distinationProps),
      style: {
        alignItems: "center",
        width: "100%",
        flexDirection: "row",
        justifyContent: "space-between"
      }
    }, text ? /* @__PURE__ */ React__default['default'].createElement(reactNative.Text, {
      style: {
        color: foregroundColor || defaultForegroundColor,
        fontSize: 18
      }
    }, text || destination) : children, /* @__PURE__ */ React__default['default'].createElement(RightChevron, null));
  }
  return /* @__PURE__ */ React__default['default'].createElement(reactNative.Button, {
    title: text || destination,
    onPress: () => navigation.navigate(destination, distinationProps),
    color: foregroundColor || defaultForegroundColor
  }, children);
};

reactNativeScreens.enableScreens();
const Stack = nativeStack.createNativeStackNavigator();
const NavigationViewManager = ({
  children
}) => {
  return /* @__PURE__ */ React__default['default'].createElement(Stack.Navigator, null, React__default['default'].Children.map(children, (child) => {
    return /* @__PURE__ */ React__default['default'].createElement(Stack.Screen, {
      name: child.props.name,
      component: child.props.view,
      options: getHeaderOptions(child)
    });
  }));
};
const getHeaderOptions = (child) => {
  if (!child.props.navigationBar)
    return null;
  const {
    displayMode,
    disabled,
    title,
    trailing,
    leading,
    background,
    foregroundColor,
    hideShadow,
    presentation,
    colorScheme = "light",
    ...rest
  } = child.props.navigationBar;
  return child.props.navigationBar && {
    ...disabled && {
      headerShown: false
    },
    ...leading && {
      headerLeft: leading
    },
    ...trailing && {
      headerRight: trailing
    },
    ...foregroundColor && {
      headerTintColor: systemColor(foregroundColor, colorScheme)
    },
    ...background && {
      headerStyle: {backgroundColor: systemColor(background, colorScheme)}
    },
    ...displayMode && {
      headerLargeTitle: displayMode === "large"
    },
    ...hideShadow && displayMode === "large" ? {
      headerLargeTitleHideShadow: hideShadow
    } : {headerHideShadow: hideShadow},
    ...presentation && {
      stackPresentation: presentation
    },
    ...rest
  };
};

const NavigationView = (props) => {
  return null;
};

const Tabs = bottomTabs.createBottomTabNavigator();
const TabView = ({options, children}) => {
  return /* @__PURE__ */ React__default['default'].createElement(Tabs.Navigator, {
    screenOptions: options
  }, React__default['default'].Children.map(children, (child) => /* @__PURE__ */ React__default['default'].createElement(Tabs.Screen, {
    name: child.props.name,
    component: child.props.view,
    options: child.props.options
  })));
};

const TabItem = (props) => {
  return null;
};

exports.NavigationLink = NavigationLink;
exports.NavigationManager = NavigationManager;
exports.NavigationView = NavigationView;
exports.NavigationViewManager = NavigationViewManager;
exports.TabItem = TabItem;
exports.TabView = TabView;
//# sourceMappingURL=navigation.js.map

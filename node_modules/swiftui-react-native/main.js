'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var reactNative = require('react-native');
var reactNativeGestureHandler = require('react-native-gesture-handler');
var Animated = require('react-native-reanimated');
var v1 = require('react-native-redash/lib/module/v1');
var MaskedView = require('@react-native-community/masked-view');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var Animated__default = /*#__PURE__*/_interopDefaultLegacy(Animated);
var MaskedView__default = /*#__PURE__*/_interopDefaultLegacy(MaskedView);

const COLOR_VALUES = {
  black: {light: "#000", dark: "#fff"},
  white: {light: "#fff", dark: "#000"},
  transparent: {light: "transparent", dark: "transparent"},
  systemBackground: {light: "#fff", dark: "#000"},
  systemRed: {light: "#ff3b30", dark: "#ff3b30"},
  systemBlue: {light: "#007bff", dark: "#0a84ff"},
  systemGreen: {light: "#34c759", dark: "#30d158"},
  systemIndigo: {light: "#5856d6", dark: "#5e5ce6"},
  systemTeal: {light: "#5ac7fa", dark: "#64d2ff"},
  systemPink: {light: "#ff2d54", dark: "#ff375f"},
  systemPurple: {light: "#af52de", dark: "#bf5af2"},
  systemOrange: {light: "#ff9500", dark: "#ff9f0a"},
  systemYellow: {light: "#ffcc00", dark: "#ffd60a"},
  systemGray: {light: "#8e8e93", dark: "#8e8e93"},
  systemGray2: {light: "#aeaeb2", dark: "#636366"},
  systemGray3: {light: "#c7c7cc", dark: "#48484a"},
  systemGray4: {light: "#d1d1d6", dark: "#3a3a3c"},
  systemGray5: {light: "#e5e5ea", dark: "#2c2c2e"},
  systemGray6: {light: "#f2f2f7", dark: "#1c1c1e"}
};
const UIColor = {
  black: "black",
  white: "white",
  transparent: "transparent",
  systemBackground: "systemBackground",
  systemRed: "systemRed",
  systemBlue: "systemBlue",
  systemGreen: "systemGreen",
  systemIndigo: "systemIndigo",
  systemTeal: "systemTeal",
  systemPink: "systemPink",
  systemPurple: "systemPurple",
  systemOrange: "systemOrange",
  systemYellow: "systemYellow",
  systemGray: "systemGray",
  systemGray2: "systemGray2",
  systemGray3: "systemGray3",
  systemGray4: "systemGray4",
  systemGray5: "systemGray5",
  systemGray6: "systemGray6"
};
const systemColor = (color, colorScheme) => {
  const colorValues = COLOR_VALUES[color];
  if (colorValues) {
    return colorScheme ? colorValues[colorScheme] : colorValues.light;
  }
  return color;
};

const Fonts = {
  fonts: {system: "System"},
  weights: {
    normal: "normal",
    bold: "bold",
    heavy: "800",
    light: "500",
    medium: "600"
  }
};

const getPadding = (paddingProps) => {
  if (!paddingProps)
    return null;
  if (typeof paddingProps === "number") {
    return {
      paddingTop: paddingProps,
      paddingBottom: paddingProps,
      paddingLeft: paddingProps,
      paddingRight: paddingProps
    };
  }
  const {
    top,
    bottom,
    leading,
    trailing,
    vertical,
    horizontal,
    all
  } = paddingProps;
  return {
    ...(top || vertical || all) && {
      paddingTop: all || vertical || top || null
    },
    ...(bottom || vertical || all) && {
      paddingBottom: all || vertical || bottom || null
    },
    ...(leading || horizontal || all) && {
      paddingLeft: all || horizontal || leading || null
    },
    ...(trailing || horizontal || all) && {
      paddingRight: all || horizontal || trailing || null
    }
  };
};

const getShadow = (shadow) => {
  if (!shadow)
    return null;
  return {
    ...shadow.color && {shadowColor: shadow.color},
    ...shadow.radius && {shadowRadius: shadow.radius},
    ...shadow.x && shadow.y && {shadowOffset: {width: shadow.x, height: shadow.y}}
  };
};

const ColorSchemeContext = React.createContext(null);
const ColorSchemeManager = ({
  defaultMode = "light",
  children
}) => {
  const [colorScheme, setColorScheme] = React.useState(defaultMode);
  const toggleColorScheme = (to = null) => {
    if (to) {
      setColorScheme(to);
    } else if (colorScheme === "light") {
      setColorScheme("dark");
    } else {
      setColorScheme("light");
    }
  };
  return /* @__PURE__ */ React__default['default'].createElement(ColorSchemeContext.Provider, {
    value: {colorScheme, toggleColorScheme}
  }, children);
};

const useColorScheme = () => React.useContext(ColorSchemeContext) || {
  colorScheme: "light",
  setColorScheme: null
};

const Text = ({
  fontSize = 18,
  font,
  foregroundColor = UIColor.black,
  fontWeight,
  alignment = "center",
  padding,
  cornerRadius = 0,
  shadow,
  children,
  buttonChild,
  ...props
}) => {
  const {colorScheme} = useColorScheme();
  return /* @__PURE__ */ React__default['default'].createElement(reactNative.Text, {
    style: {
      color: buttonChild ? systemColor(UIColor.systemBlue, colorScheme) : systemColor(foregroundColor, colorScheme),
      fontSize,
      fontWeight: Fonts.weights[fontWeight] || Fonts.weights.normal,
      fontFamily: Fonts.fonts[font] || Fonts.fonts.system,
      textAlign: alignment === "leading" ? "left" : "center",
      borderRadius: cornerRadius,
      ...getShadow(shadow),
      ...getPadding(padding)
    },
    ...props
  }, children);
};

const DEFAULT_IMAGE_SIZE = 15;
const Image = ({
  source,
  systemName,
  foregroundColor,
  frame = {width: DEFAULT_IMAGE_SIZE, height: DEFAULT_IMAGE_SIZE}
}) => {
  if (systemName) {
    return null;
  }
  return /* @__PURE__ */ React__default['default'].createElement(reactNative.Image, {
    source,
    style: {
      width: frame.width,
      height: frame.height
    }
  });
};

const Alignments = {
  horizontal: {
    leading: "flex-start",
    center: "center",
    trailing: "flex-end"
  },
  vertical: {
    top: "flex-start",
    center: "center",
    bottom: "flex-end"
  }
};

const Button = ({
  action,
  text,
  background = UIColor.transparent,
  foregroundColor = UIColor.systemBlue,
  cornerRadius = 0,
  padding = 0,
  alignment,
  children,
  ...props
}) => {
  return /* @__PURE__ */ React__default['default'].createElement(reactNative.TouchableOpacity, {
    onPress: action,
    style: {
      backgroundColor: background,
      justifyContent: "center",
      alignItems: Alignments.horizontal[alignment] || Alignments.horizontal.center,
      borderRadius: cornerRadius
    },
    ...props
  }, text ? /* @__PURE__ */ React__default['default'].createElement(Text, {
    buttonChild: !foregroundColor,
    foregroundColor
  }, text) : React__default['default'].Children.map(children, (child) => React__default['default'].cloneElement(child, {
    ...child.props,
    ...{buttonChild: !foregroundColor}
  })));
};

const Spacer = () => {
  return /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: {
      flex: 1
    }
  });
};

const ScrollView = ({
  children,
  direction = "vertical",
  background = UIColor.transparent,
  showIndicators = true
}) => {
  const {colorScheme} = useColorScheme();
  return /* @__PURE__ */ React__default['default'].createElement(reactNative.ScrollView, {
    horizontal: direction === "horizontal",
    scrollEventThrottle: 1,
    showsVerticalScrollIndicator: showIndicators,
    showsHorizontalScrollIndicator: showIndicators,
    style: {backgroundColor: systemColor(background, colorScheme)}
  }, children);
};

const getContainerStyles = (listStyle, {background}) => {
  const {colorScheme} = useColorScheme();
  const styles = {
    grouped: {
      backgroundColor: systemColor(background, colorScheme),
      width: "100%",
      borderBottomWidth: reactNative.StyleSheet.hairlineWidth * 1.2,
      borderTopWidth: reactNative.StyleSheet.hairlineWidth * 1.2,
      borderColor: systemColor(UIColor.systemGray3, colorScheme)
    },
    insetGrouped: {
      backgroundColor: systemColor(background, colorScheme),
      width: "90%",
      borderRadius: 10,
      overflow: "hidden"
    }
  };
  return styles[listStyle];
};
const getItemStyles = (listStyle, {index, total}) => {
  const styles = {
    grouped: {
      backgroundColor: systemColor(UIColor.transparent),
      width: "100%"
    },
    insetGrouped: {
      backgroundColor: systemColor(UIColor.transparent),
      width: "100%",
      borderTopRightRadius: index === 0 ? 10 : 0,
      borderBottomRightRadius: index === total ? 10 : 0,
      borderTopLeftRadius: index === 0 ? 10 : 0,
      borderBottomLeftRadius: index === total ? 10 : 0
    }
  };
  return styles[listStyle];
};

const {width} = reactNative.Dimensions.get("window");
const snapPoints = [-width, -100, 0];
const HEIGHT = 50;
const SwipeableItem = ({
  onDelete,
  index,
  children
}) => {
  const {
    gestureHandler,
    translation,
    velocity,
    state
  } = v1.usePanGestureHandler();
  const translateX = Animated.useValue(0);
  const offsetX = Animated.useValue(0);
  const height = Animated.useValue(HEIGHT);
  const clock = v1.useClock();
  const to = v1.snapPoint(translateX, velocity.x, snapPoints);
  const shouldRemove = Animated.useValue(0);
  const translateText = v1.clamp(Animated.interpolate(translateX, {
    inputRange: [-100, 0],
    outputRange: [0, 100]
  }), 0, 100);
  const textOpacity = Animated.interpolate(height, {
    inputRange: [0, HEIGHT],
    outputRange: [0, 1]
  });
  Animated.useCode(() => [
    Animated.cond(Animated.eq(state, reactNativeGestureHandler.State.ACTIVE), Animated.set(translateX, Animated.add(offsetX, v1.clamp(translation.x, -9999, v1.minus(offsetX))))),
    Animated.cond(Animated.eq(state, reactNativeGestureHandler.State.END), [
      Animated.set(translateX, v1.timing({clock, from: translateX, to})),
      Animated.set(offsetX, translateX),
      Animated.cond(Animated.eq(to, -width), Animated.set(shouldRemove, 1))
    ]),
    Animated.cond(shouldRemove, [
      Animated.set(height, v1.timing({from: HEIGHT, to: 0})),
      Animated.cond(Animated.not(Animated.clockRunning(clock)), Animated.call([], () => onDelete(index)))
    ])
  ], []);
  const {colorScheme} = useColorScheme();
  return /* @__PURE__ */ React__default['default'].createElement(Animated__default['default'].View, {
    style: {backgroundColor: systemColor(UIColor.systemRed, colorScheme)}
  }, /* @__PURE__ */ React__default['default'].createElement(Animated__default['default'].View, {
    style: [
      reactNative.StyleSheet.absoluteFillObject,
      {
        zIndex: -1,
        alignItems: "flex-end",
        justifyContent: "center",
        marginRight: 20,
        transform: [{translateX: translateText}]
      }
    ]
  }, /* @__PURE__ */ React__default['default'].createElement(reactNative.TouchableOpacity, {
    onPress: () => shouldRemove.setValue(1)
  }, /* @__PURE__ */ React__default['default'].createElement(Animated__default['default'].Text, {
    style: {color: systemColor(UIColor.white), opacity: textOpacity}
  }, "Delete"))), /* @__PURE__ */ React__default['default'].createElement(reactNativeGestureHandler.PanGestureHandler, {
    ...gestureHandler
  }, /* @__PURE__ */ React__default['default'].createElement(Animated__default['default'].View, {
    style: {height, transform: [{translateX}]}
  }, children)));
};

const List = ({
  listStyle = "insetGrouped",
  onDelete,
  background = UIColor.white,
  children
}) => {
  const {colorScheme} = useColorScheme();
  return /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: getContainerStyles(listStyle, {background})
  }, React__default['default'].Children.map(children, (child, i) => {
    const totalChildren = React__default['default'].Children.toArray(children).length - 1;
    const listItem = /* @__PURE__ */ React__default['default'].createElement(React__default['default'].Fragment, {
      key: i
    }, /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
      style: [
        getItemStyles(listStyle, {
          index: i,
          total: totalChildren
        }),
        {
          paddingVertical: 12,
          paddingHorizontal: 20,
          backgroundColor: systemColor(background, colorScheme)
        }
      ],
      key: i
    }, React__default['default'].cloneElement(child, {
      ...child.props,
      ...{listItem: true}
    })), i !== totalChildren && /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
      style: {
        borderColor: systemColor(UIColor.systemGray3, colorScheme),
        borderBottomWidth: reactNative.StyleSheet.hairlineWidth * 1.2,
        marginLeft: 20
      }
    }));
    return onDelete ? /* @__PURE__ */ React__default['default'].createElement(SwipeableItem, {
      onDelete,
      index: i
    }, listItem) : listItem;
  }));
};

const Link = ({destination, text, children, ...props}) => /* @__PURE__ */ React__default['default'].createElement(Button, {
  text,
  action: () => reactNative.Linking.openURL(destination),
  ...props
}, children);

const getFrame = (frame) => {
  const defaultStyles = {width: "100%"};
  let styles = {};
  if (!frame)
    return defaultStyles;
  if (frame.maxHeight === "infinity") {
    styles = {...styles, flex: 1};
    delete frame.maxHeight;
  }
  if (!Object.keys(frame).includes("width")) {
    styles = {...styles, ...defaultStyles};
  }
  return {...styles, ...frame};
};

const HStack = ({
  background = UIColor.transparent,
  spacing,
  alignment = Alignments.vertical.center,
  cornerRadius = 0,
  padding,
  frame,
  children
}) => {
  const {colorScheme} = useColorScheme();
  return /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: {
      flexDirection: "row",
      justifyContent: "center",
      backgroundColor: systemColor(background, colorScheme),
      borderRadius: cornerRadius,
      alignItems: Alignments.vertical[alignment],
      ...getFrame(frame),
      ...getPadding(padding)
    }
  }, spacing && spacing !== 0 ? React__default['default'].Children.map(children, (child) => /* @__PURE__ */ React__default['default'].createElement(React__default['default'].Fragment, null, /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: {width: spacing}
  }), child, /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: {width: spacing}
  }))) : children);
};

const Label = ({text, systemName, icon}) => {
  return /* @__PURE__ */ React__default['default'].createElement(HStack, null, /* @__PURE__ */ React__default['default'].createElement(Text, null, text), icon ? icon : /* @__PURE__ */ React__default['default'].createElement(Image, {
    systemName
  }));
};

const Toggle = ({
  isOn,
  onColor,
  offColor,
  onToggle
}) => {
  const {colorScheme} = useColorScheme();
  return /* @__PURE__ */ React__default['default'].createElement(reactNative.Switch, {
    value: isOn,
    onValueChange: onToggle,
    trackColor: {true: systemColor(onColor, colorScheme), false: null},
    ios_backgroundColor: systemColor(offColor, colorScheme)
  });
};

const Stepper = ({
  onIncrement,
  onDecrement
}) => {
  const {colorScheme} = useColorScheme();
  return /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: [
      styles.container,
      {backgroundColor: systemColor(UIColor.systemGray6, colorScheme)}
    ]
  }, /* @__PURE__ */ React__default['default'].createElement(Animated__default['default'].View, {
    style: styles.button
  }, /* @__PURE__ */ React__default['default'].createElement(reactNative.Button, {
    onPress: () => onDecrement,
    title: "-"
  })), /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: [
      styles.divider,
      {borderRightColor: systemColor(UIColor.systemGray4, colorScheme)}
    ]
  }), /* @__PURE__ */ React__default['default'].createElement(Animated__default['default'].View, {
    style: styles.button
  }, /* @__PURE__ */ React__default['default'].createElement(reactNative.Button, {
    onPress: () => onIncrement,
    title: "+"
  })));
};
const styles = reactNative.StyleSheet.create({
  container: {
    borderRadius: 6,
    flexDirection: "row",
    padding: 3,
    width: 100
  },
  divider: {
    top: 5,
    height: 15,
    borderRightWidth: 1,
    width: 0
  },
  button: {
    width: "50%"
  }
});

const SLIDER_WIDTH = 300;
const SLIDER_HEIGHT = 3;
const CIRCLE_WIDTH = 25;

const Cursor = ({
  translateX,
  gestureHandler
}) => {
  return /* @__PURE__ */ React__default['default'].createElement(reactNativeGestureHandler.PanGestureHandler, {
    ...gestureHandler
  }, /* @__PURE__ */ React__default['default'].createElement(Animated__default['default'].View, {
    style: [
      styles$1.cursor,
      {
        left: SLIDER_WIDTH / 2 - CIRCLE_WIDTH / 2,
        top: -CIRCLE_WIDTH / 2,
        height: CIRCLE_WIDTH,
        width: CIRCLE_WIDTH,
        transform: [{translateX}]
      }
    ]
  }));
};
const styles$1 = reactNative.StyleSheet.create({
  cursor: {
    position: "absolute",
    borderRadius: 100,
    backgroundColor: systemColor(UIColor.white),
    shadowColor: systemColor(UIColor.black),
    shadowOffset: {
      width: 0,
      height: 2
    },
    shadowOpacity: 0.2,
    shadowRadius: 3
  }
});

const FillBar = ({fillWidth, color}) => {
  const {colorScheme} = useColorScheme();
  return /* @__PURE__ */ React__default['default'].createElement(Animated__default['default'].View, {
    style: {
      backgroundColor: systemColor(color, colorScheme),
      height: SLIDER_HEIGHT,
      width: fillWidth,
      borderRadius: 10
    }
  });
};

const Slider = ({
  color = UIColor.systemBlue,
  range = [0, 10],
  step = 1,
  value,
  onSlide
}) => {
  const {colorScheme} = useColorScheme();
  const [from, through] = range;
  const midPoint = (through + from) / 2;
  const translationX = Animated.useValue(0);
  const velocityX = Animated.useValue(0);
  const state = Animated.useValue(reactNativeGestureHandler.State.UNDETERMINED);
  const offset = Animated.useValue(0);
  const start = Animated.useValue(0);
  const dragging = Animated.useValue(0);
  const position = Animated.useValue(0);
  const init = Animated.useValue(0);
  const valueVal = Animated.useValue(value);
  const midpointVal = Animated.useValue(midPoint);
  const fromVal = Animated.useValue(from);
  const sliderWidthVal = Animated.useValue(SLIDER_WIDTH);
  const gestureHandler = v1.onGestureEvent({
    state,
    translationX,
    velocityX,
    offset
  });
  const translateX = v1.clamp([
    Animated.cond(Animated.not(init), [
      Animated.set(position, Animated.divide(Animated.sub(valueVal, midpointVal), Animated.divide(Animated.sub(midpointVal, fromVal), Animated.divide(sliderWidthVal, 2)))),
      Animated.set(init, 1)
    ]),
    Animated.cond(Animated.eq(state, reactNativeGestureHandler.State.ACTIVE), [
      Animated.cond(Animated.eq(dragging, 0), [Animated.set(dragging, 1), Animated.set(start, position)]),
      Animated.set(position, Animated.add(start, translationX))
    ], [Animated.set(dragging, 0), position])
  ], -SLIDER_WIDTH / 2, SLIDER_WIDTH / 2);
  const fillWidth = Animated.interpolate(translateX, {
    inputRange: [-SLIDER_WIDTH / 2, SLIDER_WIDTH / 2],
    outputRange: [0, SLIDER_WIDTH]
  });
  Animated.useCode(() => {
    return Animated.call([translateX], (translateX2) => {
      const slope = (midPoint - from) / (SLIDER_WIDTH / 2);
      let newValue = Math.round((midPoint + translateX2[0] * slope) / step) * step;
      if (!Number.isInteger(step))
        newValue = parseFloat(newValue.toFixed(step.toString().split(".")[1].length));
      onSlide(newValue);
    });
  }, [translateX]);
  return /* @__PURE__ */ React__default['default'].createElement(Animated__default['default'].View, {
    style: [
      styles$2.slider,
      {
        width: SLIDER_WIDTH,
        height: SLIDER_HEIGHT,
        marginTop: CIRCLE_WIDTH / 2,
        marginBottom: CIRCLE_WIDTH / 2,
        backgroundColor: systemColor(UIColor.systemGray5, colorScheme)
      }
    ]
  }, /* @__PURE__ */ React__default['default'].createElement(FillBar, {
    fillWidth,
    color
  }), /* @__PURE__ */ React__default['default'].createElement(Cursor, {
    translateX,
    gestureHandler
  }));
};
const styles$2 = reactNative.StyleSheet.create({
  slider: {
    flexDirection: "row",
    borderRadius: 10
  }
});

const DEFAULT_RECT_SIZE = 20;
const RoundedRectangle = ({
  fill = UIColor.white,
  frame = {width: DEFAULT_RECT_SIZE, height: DEFAULT_RECT_SIZE}
}) => {
  const {colorScheme} = useColorScheme();
  return /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: [
      styles$3.rect,
      {
        backgroundColor: systemColor(fill, colorScheme),
        borderColor: systemColor(UIColor.systemGray5, colorScheme),
        width: frame.width,
        height: frame.height
      }
    ]
  });
};
const styles$3 = reactNative.StyleSheet.create({
  rect: {
    borderRadius: 3,
    borderWidth: 0.5
  }
});

const WHEEL_ITEM_HEIGHT = 32;
const WHEEL_VISIBLE_ITEMS = 5;
const WHEEL_PERSPECTIVE = 600;
const SLIDE_TEXT_SIZE = 14;

const withDecay = (params) => {
  const {value, velocity, state: gestureState, offset, snapPoints} = {
    ...params
  };
  const init = new Animated.Value(0);
  const clock = new Animated.Clock();
  const state = {
    finished: new Animated.Value(0),
    position: new Animated.Value(0),
    time: new Animated.Value(0),
    frameTime: new Animated.Value(0)
  };
  const config = {
    toValue: new Animated.Value(0),
    duration: new Animated.Value(1e3),
    easing: Animated.Easing.bezier(0.22, 1, 0.36, 1)
  };
  return Animated.block([
    Animated.cond(Animated.not(init), [Animated.set(state.position, offset), Animated.set(init, 1)]),
    Animated.cond(Animated.eq(gestureState, reactNativeGestureHandler.State.BEGAN), Animated.set(offset, state.position)),
    Animated.cond(Animated.eq(gestureState, reactNativeGestureHandler.State.ACTIVE), [
      Animated.set(state.position, Animated.add(offset, value)),
      Animated.set(state.time, 0),
      Animated.set(state.frameTime, 0),
      Animated.set(state.finished, 0),
      Animated.set(config.toValue, v1.snapPoint(state.position, velocity, snapPoints))
    ]),
    Animated.cond(Animated.and(Animated.not(state.finished), Animated.eq(gestureState, reactNativeGestureHandler.State.END)), [
      Animated.cond(Animated.not(Animated.clockRunning(clock)), [Animated.startClock(clock)]),
      Animated.timing(clock, state, config),
      Animated.cond(state.finished, Animated.stopClock(clock))
    ]),
    state.position
  ]);
};
const clamp = (value, lowerBound, upperBound) => Math.min(Math.max(lowerBound, value), upperBound);

const GestureHandler = ({
  value,
  max,
  onSelect,
  selection
}) => {
  const {
    gestureHandler,
    translation,
    velocity,
    state
  } = v1.usePanGestureHandler();
  const snapPoints = new Array(max).fill(0).map((_, i) => i * -WHEEL_ITEM_HEIGHT);
  const translateY = withDecay({
    value: translation.y,
    velocity: velocity.y,
    state,
    snapPoints,
    offset: new Animated.Value(selection * -WHEEL_ITEM_HEIGHT)
  });
  Animated.useCode(() => {
    return [
      Animated.set(value, Animated.add(translateY, WHEEL_ITEM_HEIGHT * 2)),
      Animated.call([value], ([value2]) => {
        if (value2 % WHEEL_ITEM_HEIGHT === 0) {
          const midPoint = Math.floor(max / 2);
          const newSelection = max - (value2 / WHEEL_ITEM_HEIGHT + midPoint) - 1;
          onSelect(newSelection);
        }
      })
    ];
  }, []);
  return /* @__PURE__ */ React__default['default'].createElement(reactNativeGestureHandler.PanGestureHandler, {
    ...gestureHandler
  }, /* @__PURE__ */ React__default['default'].createElement(Animated__default['default'].View, {
    style: reactNative.StyleSheet.absoluteFill
  }));
};

const RADIUS_REL = WHEEL_VISIBLE_ITEMS * 0.5;
const RADIUS = RADIUS_REL * WHEEL_ITEM_HEIGHT;
const WheelPicker = ({
  items,
  background,
  selection,
  onSelect
}) => {
  const translateY = v1.useValue(0);
  const {colorScheme} = useColorScheme();
  const maskElement = /* @__PURE__ */ React__default['default'].createElement(Animated__default['default'].View, {
    style: {transform: [{translateY}]}
  }, items.map((v, i) => {
    const interpolationValue = Animated.divide(Animated.sub(translateY, WHEEL_ITEM_HEIGHT * 2), -WHEEL_ITEM_HEIGHT);
    const y = Animated.interpolate(interpolationValue, {
      inputRange: [i - RADIUS_REL, i, i + RADIUS_REL],
      outputRange: [-1, 0, 1],
      extrapolate: Animated.Extrapolate.CLAMP
    });
    const rotateX = Animated.asin(y);
    const z = Animated.sub(Animated.multiply(RADIUS, Animated.cos(rotateX)), RADIUS);
    const opacity = Animated.interpolate(interpolationValue, {
      inputRange: [i - RADIUS_REL, i, i + RADIUS_REL],
      outputRange: [0.3, 1, 0.3],
      extrapolate: Animated.Extrapolate.CLAMP
    });
    return /* @__PURE__ */ React__default['default'].createElement(Animated__default['default'].View, {
      key: i,
      style: [
        styles$4.item,
        {
          opacity,
          transform: [
            {perspective: WHEEL_PERSPECTIVE},
            {rotateX},
            v1.translateZ(WHEEL_PERSPECTIVE, z)
          ]
        }
      ]
    }, /* @__PURE__ */ React__default['default'].createElement(reactNative.Text, {
      style: styles$4.label
    }, v));
  }));
  return /* @__PURE__ */ React__default['default'].createElement(React__default['default'].Fragment, null, /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: [
      styles$4.selected,
      {backgroundColor: systemColor(UIColor.systemGray6, colorScheme)}
    ]
  }), /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: styles$4.container
  }, /* @__PURE__ */ React__default['default'].createElement(MaskedView__default['default'], {
    ...{maskElement}
  }, /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: {
      height: WHEEL_ITEM_HEIGHT * 2,
      backgroundColor: systemColor(UIColor.systemGray3, colorScheme)
    }
  }), /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: {
      height: WHEEL_ITEM_HEIGHT,
      backgroundColor: systemColor(UIColor.black, colorScheme)
    }
  }), /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: {
      height: WHEEL_ITEM_HEIGHT * 2,
      backgroundColor: systemColor(UIColor.systemGray3, colorScheme)
    }
  })), /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: reactNative.StyleSheet.absoluteFill
  }, /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: {
      borderColor: systemColor(UIColor.systemGray4, colorScheme),
      top: WHEEL_ITEM_HEIGHT * 2,
      height: WHEEL_ITEM_HEIGHT,
      borderRadius: 6
    }
  })), /* @__PURE__ */ React__default['default'].createElement(GestureHandler, {
    max: items.length,
    value: translateY,
    onSelect,
    selection
  })));
};
const styles$4 = reactNative.StyleSheet.create({
  selected: {
    position: "absolute",
    height: WHEEL_ITEM_HEIGHT,
    width: "90%",
    borderRadius: 6
  },
  container: {
    width: "90%",
    overflow: "hidden"
  },
  item: {
    height: WHEEL_ITEM_HEIGHT,
    justifyContent: "center"
  },
  label: {
    color: "white",
    fontSize: 24,
    lineHeight: WHEEL_ITEM_HEIGHT,
    textAlign: "center",
    textAlignVertical: "center"
  }
});

const height = 2.5;
const shortWidth = 8;
const longWidth = 16;
const borderRadius = 10;
const CheckMark = () => {
  return /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: styles$5.container
  }, /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: [styles$5.arm, styles$5.short]
  }), /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: [styles$5.arm, styles$5.long]
  }));
};
const styles$5 = reactNative.StyleSheet.create({
  container: {
    flexDirection: "column"
  },
  arm: {
    height,
    backgroundColor: systemColor(UIColor.systemBlue),
    borderRadius
  },
  short: {
    width: shortWidth,
    transform: [{translateY: 5}, {rotate: "45deg"}]
  },
  long: {
    width: longWidth,
    transform: [{translateX: 3}, {rotate: "-45deg"}]
  }
});

const ListPicker = ({
  items,
  onSelect,
  selection,
  pickerStyle,
  background = UIColor.white
}) => {
  return /* @__PURE__ */ React__default['default'].createElement(List, {
    listStyle: pickerStyle,
    background
  }, items.map((item, i) => /* @__PURE__ */ React__default['default'].createElement(Button, {
    key: i,
    action: () => onSelect(i)
  }, /* @__PURE__ */ React__default['default'].createElement(HStack, null, /* @__PURE__ */ React__default['default'].createElement(Text, null, item), /* @__PURE__ */ React__default['default'].createElement(Spacer, null), selection === i ? /* @__PURE__ */ React__default['default'].createElement(CheckMark, null) : null))));
};

const {Value, timing} = reactNative.Animated;
const SegmentedPicker = ({
  items,
  selection,
  onSelect
}) => {
  const [dimensions, setDimensions] = React.useState(null);
  const translateX = React.useState(new Value(0))[0];
  const opacities = items.map(() => new Value(0));
  React.useEffect(() => {
    if (dimensions) {
      let to = dimensions.width / items.length * selection;
      if (selection === 0)
        to += 2;
      if (selection === items.length - 1)
        to -= 2;
      slide(to);
      setOpacities();
    }
  }, [dimensions, selection]);
  const setOpacities = () => {
    items.forEach((_, i) => {
      if (i === selection || i === selection - 1 || i === items.length - 1)
        opacities[i].setValue(0);
      else
        opacities[i].setValue(1);
    });
  };
  const slide = (slideValue) => {
    timing(translateX, {
      toValue: slideValue,
      duration: 200,
      easing: reactNative.Easing.inOut(reactNative.Easing.ease),
      useNativeDriver: true
    }).start();
  };
  let lastIndex = selection;
  const panGestureHandler = (e) => {
    const currentXPos = e.nativeEvent.x;
    const itemWidth = dimensions.width / items.length;
    const slideTo = clamp(Math.round((currentXPos - itemWidth / 2) / itemWidth) * itemWidth, 0, (items.length - 1) * itemWidth);
    const selectedIndex = slideTo / itemWidth;
    if (selectedIndex !== lastIndex) {
      lastIndex = selectedIndex;
      onSelect(selectedIndex);
    }
  };
  const {colorScheme} = useColorScheme();
  const sliderBackgroundColor = colorScheme === "light" ? UIColor.white : UIColor.systemGray3;
  return /* @__PURE__ */ React__default['default'].createElement(reactNativeGestureHandler.PanGestureHandler, {
    onGestureEvent: panGestureHandler
  }, /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: [
      styles$6.container,
      {backgroundColor: systemColor(UIColor.systemGray6, colorScheme)}
    ],
    onLayout: (e) => setDimensions(e.nativeEvent.layout)
  }, items.length && items.map((item, i) => /* @__PURE__ */ React__default['default'].createElement(React__default['default'].Fragment, {
    key: i
  }, /* @__PURE__ */ React__default['default'].createElement(reactNative.TouchableOpacity, {
    style: [
      styles$6.item,
      {
        flexBasis: `${100 / items.length}%`
      }
    ],
    onPress: () => onSelect(i),
    key: i
  }, /* @__PURE__ */ React__default['default'].createElement(Text, {
    fontSize: SLIDE_TEXT_SIZE,
    fontWeight: selection === i ? "bold" : "normal",
    foregroundColor: systemColor(UIColor.black, colorScheme)
  }, item)), /* @__PURE__ */ React__default['default'].createElement(reactNative.Animated.View, {
    style: [
      styles$6.divider,
      {
        opacity: opacities[i],
        borderRightColor: systemColor(UIColor.systemGray4, colorScheme)
      }
    ]
  }))), /* @__PURE__ */ React__default['default'].createElement(reactNative.Animated.View, {
    style: [
      styles$6.slider,
      {
        backgroundColor: systemColor(sliderBackgroundColor, colorScheme),
        width: dimensions ? dimensions.width / items.length : 0,
        height: dimensions ? dimensions.height - 5 : 0,
        transform: [
          {
            translateX
          }
        ]
      }
    ]
  })));
};
const styles$6 = reactNative.StyleSheet.create({
  container: {
    width: "90%",
    borderRadius: 6,
    flexDirection: "row",
    padding: 3
  },
  slider: {
    position: "absolute",
    top: 2,
    zIndex: -1,
    borderRadius: 6,
    shadowColor: systemColor(UIColor.black),
    shadowOffset: {
      width: 0,
      height: 2
    },
    shadowOpacity: 0.1,
    shadowRadius: 3
  },
  divider: {
    top: 5,
    height: 15,
    borderRightWidth: 1,
    width: 0
  },
  item: {
    justifyContent: "center",
    paddingVertical: 5,
    paddingHorizontal: 20
  }
});

const Picker = (props) => {
  switch (props.pickerStyle) {
    case "insetGrouped":
    case "grouped":
      return /* @__PURE__ */ React__default['default'].createElement(ListPicker, {
        ...props
      });
    case "wheel":
      return /* @__PURE__ */ React__default['default'].createElement(WheelPicker, {
        ...props
      });
    case "segmented":
      return /* @__PURE__ */ React__default['default'].createElement(SegmentedPicker, {
        ...props
      });
    default:
      return /* @__PURE__ */ React__default['default'].createElement(WheelPicker, {
        ...props
      });
  }
};

const PlainTextField = ({
  placeholder,
  text,
  onChangeText,
  frame = {width: null, height: null}
}) => {
  return /* @__PURE__ */ React__default['default'].createElement(reactNative.TextInput, {
    style: {
      width: frame.width,
      height: frame.height
    },
    placeholder,
    value: text,
    onChangeText
  });
};

const RoundedBorderTextField = ({
  placeholder,
  text,
  onChangeText,
  frame = {width: null, height: null}
}) => {
  const {colorScheme} = useColorScheme();
  return /* @__PURE__ */ React__default['default'].createElement(reactNative.TextInput, {
    style: [
      styles$7.input,
      {
        width: frame.width,
        height: frame.height,
        backgroundColor: systemColor(UIColor.systemGray6, colorScheme),
        color: systemColor(UIColor.black, colorScheme)
      }
    ],
    placeholder,
    value: text,
    onChangeText
  });
};
const styles$7 = reactNative.StyleSheet.create({
  input: {
    borderRadius: 6,
    paddingHorizontal: 10,
    paddingVertical: 7
  }
});

const {timing: timing$1, Value: Value$1} = reactNative.Animated;
const AnimatedTextField = ({
  placeholder,
  text,
  onChangeText,
  frame = {width: null, height: null}
}) => {
  const translateY = React.useState(new Value$1(0))[0];
  const opacity = React.useState(new Value$1(0))[0];
  const animatePlaceholder = () => {
    const translateYTo = text === "" ? 20 : 0;
    const opacityTo = text === "" ? 0 : 1;
    timing$1(translateY, {
      toValue: translateYTo,
      duration: 200,
      easing: reactNative.Easing.ease,
      useNativeDriver: true
    }).start();
    timing$1(opacity, {
      toValue: opacityTo,
      duration: 150,
      easing: reactNative.Easing.ease,
      useNativeDriver: true
    }).start();
  };
  React.useEffect(() => {
    if (text.length === 1 || text.length === 0) {
      animatePlaceholder();
    }
  }, [text]);
  const {colorScheme} = useColorScheme();
  return /* @__PURE__ */ React__default['default'].createElement(React__default['default'].Fragment, null, /* @__PURE__ */ React__default['default'].createElement(reactNative.Animated.Text, {
    style: [
      styles$8.text,
      {
        transform: [{translateY}],
        opacity,
        color: systemColor(UIColor.systemGray3, colorScheme)
      }
    ]
  }, placeholder), /* @__PURE__ */ React__default['default'].createElement(reactNative.TextInput, {
    placeholder,
    value: text,
    onChangeText,
    style: [
      styles$8.input,
      {
        width: frame.width,
        height: frame.height,
        borderBottomColor: systemColor(UIColor.systemGray3, colorScheme)
      }
    ]
  }));
};
const styles$8 = reactNative.StyleSheet.create({
  input: {
    borderBottomWidth: reactNative.StyleSheet.hairlineWidth * 1.2,
    paddingTop: 20,
    paddingBottom: 10,
    fontSize: 18
  },
  text: {
    position: "absolute",
    left: 20,
    fontSize: 16
  }
});

const TextField = (props) => {
  switch (props.textFieldStyle) {
    case "animated":
      return /* @__PURE__ */ React__default['default'].createElement(AnimatedTextField, {
        ...props
      });
    case "plain":
      return /* @__PURE__ */ React__default['default'].createElement(PlainTextField, {
        ...props
      });
    case "rounded-border":
      return /* @__PURE__ */ React__default['default'].createElement(RoundedBorderTextField, {
        ...props
      });
    default:
      return /* @__PURE__ */ React__default['default'].createElement(PlainTextField, {
        ...props
      });
  }
};

const BackgroundShadow = ({
  shadowOpacity,
  children
}) => {
  return /* @__PURE__ */ React__default['default'].createElement(Animated__default['default'].View, {
    pointerEvents: "none",
    style: [
      reactNative.StyleSheet.absoluteFill,
      {
        opacity: shadowOpacity,
        backgroundColor: systemColor(UIColor.black)
      }
    ]
  }, children);
};

const PEAKING_HEIGHT = 35;
const HEADER_TOP = 15;
const HEADER_WIDTH = 38;
const HEADER_HEIGHT = 6;
const CONFIG = {
  damping: 30,
  mass: 1,
  stiffness: 250,
  overshootClamping: false,
  restSpeedThreshold: 0.1,
  restDisplacementThreshold: 0.1
};

const Content = ({
  contentOpacity,
  content
}) => {
  return /* @__PURE__ */ React__default['default'].createElement(Animated__default['default'].View, {
    style: [
      reactNative.StyleSheet.absoluteFill,
      {top: PEAKING_HEIGHT + HEADER_TOP, opacity: contentOpacity}
    ]
  }, content);
};

const Header = ({header}) => {
  return /* @__PURE__ */ React__default['default'].createElement(Animated__default['default'].View, {
    style: {
      position: "absolute",
      top: HEADER_TOP,
      borderBottomColor: systemColor(UIColor.transparent),
      width: "100%",
      height: PEAKING_HEIGHT
    }
  }, /* @__PURE__ */ React__default['default'].createElement(Text, {
    alignment: "leading",
    fontWeight: "bold",
    padding: {leading: HEADER_TOP, bottom: HEADER_TOP}
  }, header));
};

const PullLine = ({width}) => {
  const left = width / 2 - HEADER_WIDTH / 2;
  const {colorScheme} = useColorScheme();
  return /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: {
      position: "absolute",
      top: HEADER_HEIGHT,
      left,
      height: HEADER_HEIGHT,
      width: HEADER_WIDTH,
      backgroundColor: systemColor(UIColor.systemGray3, colorScheme),
      borderRadius: 10
    }
  });
};

const {width: width$1, height: height$1} = reactNative.Dimensions.get("screen");
const SNAP_THREE_QUARTER = height$1 / 4;
const SNAP_HALF = height$1 / 2 + PEAKING_HEIGHT;
const SNAP_QUARTER = 3 * height$1 / 4;
const SNAP_BOTTOM = height$1 - PEAKING_HEIGHT;
const snapMap = {
  bottom: SNAP_BOTTOM,
  quarter: SNAP_QUARTER,
  half: SNAP_HALF,
  "three-quarter": SNAP_THREE_QUARTER,
  full: PEAKING_HEIGHT
};
const BottomSheet = ({
  background = UIColor.white,
  opacity,
  header,
  snapPoints,
  children
}) => {
  const translationY = Animated.useValue(0);
  const velocityY = Animated.useValue(0);
  const state = Animated.useValue(reactNativeGestureHandler.State.UNDETERMINED);
  const offset = Animated.useValue(SNAP_BOTTOM);
  const {colorScheme} = useColorScheme();
  const snaps = snapPoints ? [...snapPoints.map((s) => snapMap[s]), snapMap.bottom] : [snapMap.bottom, snapMap["three-quarter"]];
  const gestureHandler = v1.onGestureEvent({
    state,
    translationY,
    velocityY
  });
  const translateY = v1.clamp(v1.withSpring({
    value: translationY,
    velocity: velocityY,
    offset,
    state,
    snapPoints: snaps,
    config: CONFIG
  }), Math.min(...snaps) - PEAKING_HEIGHT, SNAP_BOTTOM);
  const shadowOpacity = Animated.interpolate(translateY, {
    inputRange: [PEAKING_HEIGHT, SNAP_BOTTOM],
    outputRange: [0.5, 0]
  });
  const contentOpacity = Animated.interpolate(translateY, {
    inputRange: [SNAP_QUARTER, SNAP_BOTTOM],
    outputRange: [1, 0]
  });
  return /* @__PURE__ */ React__default['default'].createElement(React__default['default'].Fragment, null, /* @__PURE__ */ React__default['default'].createElement(BackgroundShadow, {
    shadowOpacity
  }), /* @__PURE__ */ React__default['default'].createElement(reactNativeGestureHandler.PanGestureHandler, {
    ...gestureHandler
  }, /* @__PURE__ */ React__default['default'].createElement(Animated__default['default'].View, {
    style: [
      styles$9.bottomSheet,
      {
        bottom: PEAKING_HEIGHT,
        height: height$1,
        width: width$1,
        backgroundColor: systemColor(background, colorScheme),
        opacity: opacity || 1,
        transform: [{translateY}]
      }
    ]
  }, /* @__PURE__ */ React__default['default'].createElement(PullLine, {
    width: width$1
  }), header && /* @__PURE__ */ React__default['default'].createElement(Header, {
    header
  }), /* @__PURE__ */ React__default['default'].createElement(Content, {
    content: children,
    contentOpacity
  }))));
};
const styles$9 = reactNative.StyleSheet.create({
  bottomSheet: {
    position: "absolute",
    shadowColor: systemColor(UIColor.black),
    shadowOffset: {
      width: 0,
      height: 2
    },
    shadowOpacity: 0.1,
    shadowRadius: 3,
    borderTopRightRadius: 10,
    borderTopLeftRadius: 10
  }
});

const VStack = ({
  background = UIColor.transparent,
  spacing,
  alignment = Alignments.horizontal.center,
  cornerRadius = 0,
  padding,
  frame,
  children
}) => {
  const {colorScheme} = useColorScheme();
  return /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: {
      backgroundColor: systemColor(background, colorScheme),
      alignItems: Alignments.horizontal[alignment],
      justifyContent: "center",
      borderRadius: cornerRadius,
      ...getFrame(frame),
      ...getPadding(padding)
    }
  }, spacing && spacing !== 0 ? React__default['default'].Children.map(children, (child) => /* @__PURE__ */ React__default['default'].createElement(React__default['default'].Fragment, null, /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: {height: spacing}
  }), child, /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: {height: spacing}
  }))) : children);
};

const ZStack = ({
  background = UIColor.transparent,
  cornerRadius = 0,
  padding,
  frame,
  children
}) => {
  const {colorScheme} = useColorScheme();
  return /* @__PURE__ */ React__default['default'].createElement(reactNative.View, {
    style: {
      backgroundColor: systemColor(background, colorScheme),
      justifyContent: "center",
      borderRadius: cornerRadius,
      ...getFrame(frame),
      ...getPadding(padding)
    }
  }, React__default['default'].Children.map(children, (child, i) => React__default['default'].cloneElement(child, {
    ...child.props,
    style: {zIndex: i, position: "absolute"}
  })));
};

function useOnAppear(perform) {
  React.useEffect(() => perform(), []);
}

function useOnDisappear(perform) {
  React.useEffect(() => perform, []);
}

const useAlert = (isPresented, alert) => {
  React.useEffect(() => {
    if (isPresented) {
      reactNative.Alert.alert(alert.title, alert.message, alert.buttons);
    }
  }, [isPresented]);
};

exports.BottomSheet = BottomSheet;
exports.Button = Button;
exports.ColorSchemeContext = ColorSchemeContext;
exports.ColorSchemeManager = ColorSchemeManager;
exports.HStack = HStack;
exports.Image = Image;
exports.Label = Label;
exports.Link = Link;
exports.List = List;
exports.Picker = Picker;
exports.RoundedRectangle = RoundedRectangle;
exports.ScrollView = ScrollView;
exports.Slider = Slider;
exports.Spacer = Spacer;
exports.Stepper = Stepper;
exports.Text = Text;
exports.TextField = TextField;
exports.Toggle = Toggle;
exports.UIColor = UIColor;
exports.VStack = VStack;
exports.ZStack = ZStack;
exports.useAlert = useAlert;
exports.useColorScheme = useColorScheme;
exports.useOnAppear = useOnAppear;
exports.useOnDisappear = useOnDisappear;
//# sourceMappingURL=main.js.map

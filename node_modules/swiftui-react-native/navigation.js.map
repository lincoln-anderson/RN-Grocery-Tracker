{"version":3,"file":"navigation.js","sources":["../src/views/NavigationManager/NavigationManager.tsx","../src/utils/colors/index.ts","../src/views/NavigationLink/RightChevron.tsx","../src/views/NavigationLink/NavigationLink.tsx","../src/views/NavigationViewManager/NavigationViewManager.tsx","../src/views/NavigationView/NavigationView.tsx","../src/views/TabView/TabView.tsx","../src/views/TabItem/TabItem.tsx"],"sourcesContent":["import React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\n\ntype NavigationManagerProps = {};\n\nexport const NavigationManager: React.FC<NavigationManagerProps> = ({\n  children,\n}) => {\n  return <NavigationContainer>{children}</NavigationContainer>;\n};\n","import { ColorScheme } from '../../views/ColorSchemeManager';\n\ntype UIColorNames = keyof typeof COLOR_VALUES;\n\nconst COLOR_VALUES = {\n  black: { light: '#000', dark: '#fff' },\n  white: { light: '#fff', dark: '#000' },\n  transparent: { light: 'transparent', dark: 'transparent' },\n  systemBackground: { light: '#fff', dark: '#000' },\n  systemRed: { light: '#ff3b30', dark: '#ff3b30' },\n  systemBlue: { light: '#007bff', dark: '#0a84ff' },\n  systemGreen: { light: '#34c759', dark: '#30d158' },\n  systemIndigo: { light: '#5856d6', dark: '#5e5ce6' },\n  systemTeal: { light: '#5ac7fa', dark: '#64d2ff' },\n  systemPink: { light: '#ff2d54', dark: '#ff375f' },\n  systemPurple: { light: '#af52de', dark: '#bf5af2' },\n  systemOrange: { light: '#ff9500', dark: '#ff9f0a' },\n  systemYellow: { light: '#ffcc00', dark: '#ffd60a' },\n  systemGray: { light: '#8e8e93', dark: '#8e8e93' },\n  systemGray2: { light: '#aeaeb2', dark: '#636366' },\n  systemGray3: { light: '#c7c7cc', dark: '#48484a' },\n  systemGray4: { light: '#d1d1d6', dark: '#3a3a3c' },\n  systemGray5: { light: '#e5e5ea', dark: '#2c2c2e' },\n  systemGray6: { light: '#f2f2f7', dark: '#1c1c1e' },\n};\n\n/**\n * A map of all UIColors\n */\nexport const UIColor: { [key in UIColorNames]: string } = {\n  black: 'black',\n  white: 'white',\n  transparent: 'transparent',\n  systemBackground: 'systemBackground',\n  systemRed: 'systemRed',\n  systemBlue: 'systemBlue',\n  systemGreen: 'systemGreen',\n  systemIndigo: 'systemIndigo',\n  systemTeal: 'systemTeal',\n  systemPink: 'systemPink',\n  systemPurple: 'systemPurple',\n  systemOrange: 'systemOrange',\n  systemYellow: 'systemYellow',\n  systemGray: 'systemGray',\n  systemGray2: 'systemGray2',\n  systemGray3: 'systemGray3',\n  systemGray4: 'systemGray4',\n  systemGray5: 'systemGray5',\n  systemGray6: 'systemGray6',\n};\n\n/**\n * Gets the color hex value for a given color.\n * If a color scheme is provided, the appropriate color will be chosen.\n * Defaults to light mode.\n */\nexport const systemColor = (\n  color: string,\n  colorScheme?: ColorScheme\n): string => {\n  const colorValues = COLOR_VALUES[color];\n  if (colorValues) {\n    return colorScheme ? colorValues[colorScheme] : colorValues.light;\n  }\n  return color;\n};\n\n// UNIMPLEMENTED COLORS\n// link: 'link',\n// label: 'label',\n// secondaryLabel: 'secondaryLabel',\n// tertiaryLabel: 'tertiaryLabel',\n// quaternaryLabel: 'quaternaryLabel',\n// systemFill: 'systemFill',\n// secondarySystemFill: 'secondarySystemFill',\n// tertiarySystemFill: 'tertiarySystemFill',\n// quaternarySystemFill: 'quaternarySystemFill',\n// secondarySystemBackground: 'secondarySystemBackground',\n// tertiarySystemBackground: 'tertiarySystemBackground',\n","import React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { systemColor, UIColor } from '../../utils/colors';\n\nconst height = 2.5;\nconst width = 10;\nconst borderRadius = 10;\n\nexport const RightChevron: React.FC = () => {\n  return (\n    <View style={styles.container}>\n      <View style={[styles.arm, styles.top]} />\n      <View style={[styles.arm, styles.bottom]} />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'column',\n  },\n  arm: {\n    height,\n    width,\n    backgroundColor: systemColor(UIColor.systemGray3),\n    borderRadius,\n  },\n  top: {\n    transform: [{ translateY: -height }, { rotate: '45deg' }],\n  },\n  bottom: {\n    transform: [{ rotate: '-45deg' }],\n  },\n});\n","import React from 'react';\nimport { NativeStackNavigationProp } from 'react-native-screens/native-stack';\nimport { TouchableOpacity, Text, Button } from 'react-native';\nimport { RightChevron } from './RightChevron';\nimport { systemColor, UIColor } from '../../utils/colors';\n\ntype NavigationLinkProps = {\n  navigation: NativeStackNavigationProp<any, any>;\n  destination: string;\n  distinationProps?: object;\n  text?: string;\n  listItem?: boolean;\n  foregroundColor?: string;\n  children?: React.ReactElement<any>;\n};\n\nexport const NavigationLink = ({\n  navigation,\n  destination,\n  distinationProps,\n  children,\n  text,\n  foregroundColor,\n  listItem,\n}: NavigationLinkProps) => {\n  const defaultForegroundColor = listItem\n    ? systemColor(UIColor.black, 'light')\n    : systemColor(UIColor.systemBlue, 'light');\n  if (listItem) {\n    return (\n      <TouchableOpacity\n        onPress={() => navigation.navigate(destination, distinationProps)}\n        style={{\n          alignItems: 'center',\n          width: '100%',\n          flexDirection: 'row',\n          justifyContent: 'space-between',\n        }}\n      >\n        {text ? (\n          <Text\n            style={{\n              color: foregroundColor || defaultForegroundColor,\n              fontSize: 18,\n            }}\n          >\n            {text || destination}\n          </Text>\n        ) : (\n          children\n        )}\n        <RightChevron />\n      </TouchableOpacity>\n    );\n  }\n  return (\n    <Button\n      title={text || destination}\n      onPress={() => navigation.navigate(destination, distinationProps)}\n      color={foregroundColor || defaultForegroundColor}\n    >\n      {children}\n    </Button>\n  );\n};\n","import React from 'react';\nimport { NavigationViewProps } from '../NavigationView';\nimport {\n  createNativeStackNavigator,\n  NativeStackNavigationOptions,\n} from 'react-native-screens/native-stack';\nimport { enableScreens } from 'react-native-screens';\nimport { NavigationBar } from '../../navigation';\nimport { systemColor } from '../../utils/colors';\n\nenableScreens();\nconst Stack = createNativeStackNavigator();\n\ntype NavigationViewManagerProps = {\n  children:\n    | React.ReactElement<NavigationViewProps>\n    | Array<React.ReactElement<NavigationViewProps>>;\n};\n\nexport const NavigationViewManager = ({\n  children,\n}: NavigationViewManagerProps) => {\n  return (\n    <Stack.Navigator>\n      {React.Children.map(children, (child) => {\n        return (\n          <Stack.Screen\n            name={child.props.name}\n            component={child.props.view}\n            options={getHeaderOptions(child)}\n          />\n        );\n      })}\n    </Stack.Navigator>\n  );\n};\n\nconst getHeaderOptions = (child: React.ReactElement<NavigationViewProps>) => {\n  if (!child.props.navigationBar) return null;\n  const {\n    displayMode,\n    disabled,\n    title,\n    trailing,\n    leading,\n    background,\n    foregroundColor,\n    hideShadow,\n    presentation,\n    colorScheme = 'light',\n    ...rest\n  }: NavigationBar = child.props.navigationBar;\n  return (\n    child.props.navigationBar &&\n    ({\n      ...(disabled && {\n        headerShown: false,\n      }),\n      ...(leading && {\n        headerLeft: leading,\n      }),\n      ...(trailing && {\n        headerRight: trailing,\n      }),\n      ...(foregroundColor && {\n        headerTintColor: systemColor(foregroundColor, colorScheme),\n      }),\n      ...(background && {\n        headerStyle: { backgroundColor: systemColor(background, colorScheme) },\n      }),\n      ...(displayMode && {\n        headerLargeTitle: displayMode === 'large',\n      }),\n      ...(hideShadow && displayMode === 'large'\n        ? {\n            headerLargeTitleHideShadow: hideShadow,\n          }\n        : { headerHideShadow: hideShadow }),\n      ...(presentation && {\n        stackPresentation: presentation,\n      }),\n      ...rest,\n    } as NativeStackNavigationOptions)\n  );\n};\n","import React from 'react';\nimport { NativeStackNavigationOptions } from 'react-native-screens/lib/typescript/types';\nimport { ColorScheme } from '../ColorSchemeManager';\n\nexport type NavigationViewProps = {\n  name: string;\n  view: React.ComponentType<any>;\n  navigationBar?: NavigationBar;\n};\n\nexport type NavigationBar = {\n  disabled?: boolean;\n  title?: string;\n  displayMode?: 'inline' | 'large' | 'animated-inline' | 'animated-large';\n  background?: string;\n  foregroundColor?: string;\n  hideShadow?: boolean;\n  colorScheme?: ColorScheme;\n  leading?: () => React.ReactElement<any>;\n  trailing?: () => React.ReactElement<any>;\n  presentation: string;\n} & NativeStackNavigationOptions;\n\nexport const NavigationView: React.FC<NavigationViewProps> = (props) => {\n  return null;\n};\n","import React from \"react\";\nimport { TabItemProps } from \"../TabItem\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nconst Tabs = createBottomTabNavigator();\n\ntype TabViewProps = {\n  options?: object;\n  children:\n    | React.ReactElement<TabItemProps>\n    | Array<React.ReactElement<TabItemProps>>;\n};\n\nexport const TabView = ({ options, children }: TabViewProps) => {\n  return (\n    <Tabs.Navigator screenOptions={options}>\n      {React.Children.map(children, (child) => (\n        <Tabs.Screen\n          name={child.props.name}\n          component={child.props.view}\n          options={child.props.options}\n        />\n      ))}\n    </Tabs.Navigator>\n  );\n};\n","import React from 'react';\n\nexport type TabItemProps = {\n  name: string;\n  view: React.ComponentType<any>;\n  options: object;\n};\n\nexport const TabItem: React.FC<TabItemProps> = (props) => {\n  return null;\n};\n"],"names":["NavigationContainer","View","StyleSheet","TouchableOpacity","Text","Button","enableScreens","createNativeStackNavigator","React","createBottomTabNavigator"],"mappings":";;;;;;;;;;;;;;;MAKa,oBAAsD,CAAC;AAAA,EAClE;AAAA;AAEA,iEAAQA,4BAAD,MAAsB;AAAA;;ACJ/B,MAAM,eAAe;AAAA,EACnB,OAAO,CAAE,OAAO,QAAQ,MAAM;AAAA,EAC9B,OAAO,CAAE,OAAO,QAAQ,MAAM;AAAA,EAC9B,aAAa,CAAE,OAAO,eAAe,MAAM;AAAA,EAC3C,kBAAkB,CAAE,OAAO,QAAQ,MAAM;AAAA,EACzC,WAAW,CAAE,OAAO,WAAW,MAAM;AAAA,EACrC,YAAY,CAAE,OAAO,WAAW,MAAM;AAAA,EACtC,aAAa,CAAE,OAAO,WAAW,MAAM;AAAA,EACvC,cAAc,CAAE,OAAO,WAAW,MAAM;AAAA,EACxC,YAAY,CAAE,OAAO,WAAW,MAAM;AAAA,EACtC,YAAY,CAAE,OAAO,WAAW,MAAM;AAAA,EACtC,cAAc,CAAE,OAAO,WAAW,MAAM;AAAA,EACxC,cAAc,CAAE,OAAO,WAAW,MAAM;AAAA,EACxC,cAAc,CAAE,OAAO,WAAW,MAAM;AAAA,EACxC,YAAY,CAAE,OAAO,WAAW,MAAM;AAAA,EACtC,aAAa,CAAE,OAAO,WAAW,MAAM;AAAA,EACvC,aAAa,CAAE,OAAO,WAAW,MAAM;AAAA,EACvC,aAAa,CAAE,OAAO,WAAW,MAAM;AAAA,EACvC,aAAa,CAAE,OAAO,WAAW,MAAM;AAAA,EACvC,aAAa,CAAE,OAAO,WAAW,MAAM;AAAA;MAM5B,UAA6C;AAAA,EACxD,OAAO;AAAA,EACP,OAAO;AAAA,EACP,aAAa;AAAA,EACb,kBAAkB;AAAA,EAClB,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,YAAY;AAAA,EACZ,aAAa;AAAA,EACb,aAAa;AAAA,EACb,aAAa;AAAA,EACb,aAAa;AAAA,EACb,aAAa;AAAA;MAQF,cAAc,CACzB,OACA;AAEA,QAAM,cAAc,aAAa;AACjC,MAAI;AACF,WAAO,cAAc,YAAY,eAAe,YAAY;AAAA;AAE9D,SAAO;AAAA;;AC5DT,MAAM,SAAS;AACf,MAAM,QAAQ;AACd,MAAM,eAAe;MAER,eAAyB;AACpC,iEACGC,kBAAD;AAAA,IAAM,OAAO,OAAO;AAAA,6DACjBA,kBAAD;AAAA,IAAM,OAAO,CAAC,OAAO,KAAK,OAAO;AAAA,8DAChCA,kBAAD;AAAA,IAAM,OAAO,CAAC,OAAO,KAAK,OAAO;AAAA;AAAA;AAKvC,MAAM,SAASC,uBAAW,OAAO;AAAA,EAC/B,WAAW;AAAA,IACT,eAAe;AAAA;AAAA,EAEjB,KAAK;AAAA,IACH;AAAA,IACA;AAAA,IACA,iBAAiB,YAAY,QAAQ;AAAA,IACrC;AAAA;AAAA,EAEF,KAAK;AAAA,IACH,WAAW,CAAC,CAAE,YAAY,CAAC,SAAU,CAAE,QAAQ;AAAA;AAAA,EAEjD,QAAQ;AAAA,IACN,WAAW,CAAC,CAAE,QAAQ;AAAA;AAAA;;MCfb,iBAAiB,CAAC;AAAA,EAC7B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAEA,QAAM,yBAAyB,WAC3B,YAAY,QAAQ,OAAO,WAC3B,YAAY,QAAQ,YAAY;AACpC,MAAI;AACF,mEACGC,8BAAD;AAAA,MACE,SAAS,MAAM,WAAW,SAAS,aAAa;AAAA,MAChD,OAAO;AAAA,QACL,YAAY;AAAA,QACZ,OAAO;AAAA,QACP,eAAe;AAAA,QACf,gBAAgB;AAAA;AAAA,OAGjB,+DACEC,kBAAD;AAAA,MACE,OAAO;AAAA,QACL,OAAO,mBAAmB;AAAA,QAC1B,UAAU;AAAA;AAAA,OAGX,QAAQ,eAGX,kEAED,cAAD;AAAA;AAIN,iEACGC,oBAAD;AAAA,IACE,OAAO,QAAQ;AAAA,IACf,SAAS,MAAM,WAAW,SAAS,aAAa;AAAA,IAChD,OAAO,mBAAmB;AAAA,KAEzB;AAAA;;ACnDPC;AACA,MAAM,QAAQC;MAQD,wBAAwB,CAAC;AAAA,EACpC;AAAA;AAEA,iEACG,MAAM,WAAP,MACGC,0BAAM,SAAS,IAAI,UAAU,CAAC;AAC7B,mEACG,MAAM,QAAP;AAAA,MACE,MAAM,MAAM,MAAM;AAAA,MAClB,WAAW,MAAM,MAAM;AAAA,MACvB,SAAS,iBAAiB;AAAA;AAAA;AAAA;AAQtC,MAAM,mBAAmB,CAAC;AACxB,MAAI,CAAC,MAAM,MAAM;AAAe,WAAO;AACvC,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,cAAc;AAAA,OACX;AAAA,MACc,MAAM,MAAM;AAC/B,SACE,MAAM,MAAM,iBACX;AAAA,OACK,YAAY;AAAA,MACd,aAAa;AAAA;AAAA,OAEX,WAAW;AAAA,MACb,YAAY;AAAA;AAAA,OAEV,YAAY;AAAA,MACd,aAAa;AAAA;AAAA,OAEX,mBAAmB;AAAA,MACrB,iBAAiB,YAAY,iBAAiB;AAAA;AAAA,OAE5C,cAAc;AAAA,MAChB,aAAa,CAAE,iBAAiB,YAAY,YAAY;AAAA;AAAA,OAEtD,eAAe;AAAA,MACjB,kBAAkB,gBAAgB;AAAA;AAAA,OAEhC,cAAc,gBAAgB,UAC9B;AAAA,MACE,4BAA4B;AAAA,QAE9B,CAAE,kBAAkB;AAAA,OACpB,gBAAgB;AAAA,MAClB,mBAAmB;AAAA;AAAA,OAElB;AAAA;AAAA;;MC1DI,iBAAgD,CAAC;AAC5D,SAAO;AAAA;;ACrBT,MAAM,OAAOC;MASA,UAAU,CAAC,CAAE,SAAS;AACjC,iEACG,KAAK,WAAN;AAAA,IAAgB,eAAe;AAAA,KAC5BD,0BAAM,SAAS,IAAI,UAAU,CAAC,kEAC5B,KAAK,QAAN;AAAA,IACE,MAAM,MAAM,MAAM;AAAA,IAClB,WAAW,MAAM,MAAM;AAAA,IACvB,SAAS,MAAM,MAAM;AAAA;AAAA;;MCXlB,UAAkC,CAAC;AAC9C,SAAO;AAAA;;;;;;;;;"}
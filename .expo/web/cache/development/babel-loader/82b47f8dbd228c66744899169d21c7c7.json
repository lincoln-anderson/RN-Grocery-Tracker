{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { combineReducers } from 'redux';\nimport { QUOTES_AVAILABLE, ADD_QUOTE, UPDATE_QUOTE, DELETE_QUOTE } from \"./actions\";\nvar dataState = {\n  quotes: []\n};\n\nvar dataReducer = function dataReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : dataState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_QUOTE:\n      var quote = action.data.quote;\n      var clone = JSON.parse(JSON.stringify(state.quotes));\n      clone.unshift(quote);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        quotes: clone\n      });\n\n    case QUOTES_AVAILABLE:\n      var quotes = action.data.quotes;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        quotes: quotes\n      });\n\n    case UPDATE_QUOTE:\n      {\n        var _quote = action.data.quote;\n\n        var _clone = JSON.parse(JSON.stringify(state.quotes));\n\n        var index = _clone.findIndex(function (obj) {\n          return obj.id === _quote.id;\n        });\n\n        if (index !== -1) _clone[index] = _quote;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          quotes: _clone\n        });\n      }\n\n    case DELETE_QUOTE:\n      {\n        var id = action.data.id;\n\n        var _clone2 = JSON.parse(JSON.stringify(state.quotes));\n\n        var _index = _clone2.findIndex(function (obj) {\n          return obj.id === id;\n        });\n\n        if (_index !== -1) _clone2.splice(_index, 1);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          quotes: _clone2\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nvar rootReducer = combineReducers({\n  dataReducer: dataReducer\n});\nexport default rootReducer;","map":{"version":3,"sources":["/Users/lincolnanderson/Desktop/reactNative.nosync/RN-Grocery-Tracker/data/reducers.js"],"names":["combineReducers","QUOTES_AVAILABLE","ADD_QUOTE","UPDATE_QUOTE","DELETE_QUOTE","dataState","quotes","dataReducer","state","action","type","quote","data","clone","JSON","parse","stringify","unshift","index","findIndex","obj","id","splice","rootReducer"],"mappings":";;;;;;AAAA,SAASA,eAAT,QAAgC,OAAhC;AAEA,SAASC,gBAAT,EAA2BC,SAA3B,EAAsCC,YAAtC,EAAoDC,YAApD;AAEA,IAAIC,SAAS,GAAG;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAAhB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAA+B;AAAA,MAA9BC,KAA8B,uEAAtBH,SAAsB;AAAA,MAAXI,MAAW;;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,SAAL;AACI,UAAMS,KAAN,GAAgBF,MAAM,CAACG,IAAvB,CAAMD,KAAN;AAGA,UAAIE,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeR,KAAK,CAACF,MAArB,CAAX,CAAZ;AAEAO,MAAAA,KAAK,CAACI,OAAN,CAAcN,KAAd;AAEA,6CAAWH,KAAX;AAAkBF,QAAAA,MAAM,EAAEO;AAA1B;;AAEJ,SAAKZ,gBAAL;AACI,UAAMK,MAAN,GAAiBG,MAAM,CAACG,IAAxB,CAAMN,MAAN;AAEA,6CAAWE,KAAX;AAAkBF,QAAAA,MAAM,EAANA;AAAlB;;AAEJ,SAAKH,YAAL;AAAkB;AACd,YAAMQ,MAAN,GAAgBF,MAAM,CAACG,IAAvB,CAAMD,KAAN;;AAGA,YAAIE,MAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeR,KAAK,CAACF,MAArB,CAAX,CAAZ;;AAGA,YAAMY,KAAK,GAAGL,MAAK,CAACM,SAAN,CAAgB,UAACC,GAAD;AAAA,iBAASA,GAAG,CAACC,EAAJ,KAAWV,MAAK,CAACU,EAA1B;AAAA,SAAhB,CAAd;;AAGA,YAAIH,KAAK,KAAK,CAAC,CAAf,EAAkBL,MAAK,CAACK,KAAD,CAAL,GAAeP,MAAf;AAElB,+CAAWH,KAAX;AAAkBF,UAAAA,MAAM,EAAEO;AAA1B;AACH;;AAED,SAAKT,YAAL;AAAkB;AACd,YAAMiB,EAAN,GAAaZ,MAAM,CAACG,IAApB,CAAMS,EAAN;;AAGA,YAAIR,OAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeR,KAAK,CAACF,MAArB,CAAX,CAAZ;;AAGA,YAAMY,MAAK,GAAGL,OAAK,CAACM,SAAN,CAAgB,UAACC,GAAD;AAAA,iBAASA,GAAG,CAACC,EAAJ,KAAWA,EAApB;AAAA,SAAhB,CAAd;;AAGA,YAAIH,MAAK,KAAK,CAAC,CAAf,EAAkBL,OAAK,CAACS,MAAN,CAAaJ,MAAb,EAAoB,CAApB;AAElB,+CAAWV,KAAX;AAAkBF,UAAAA,MAAM,EAAEO;AAA1B;AACH;;AAED;AACI,aAAOL,KAAP;AA/CR;AAiDH,CAlDD;;AAqDA,IAAMe,WAAW,GAAGvB,eAAe,CAAC;AAACO,EAAAA,WAAW,EAAXA;AAAD,CAAD,CAAnC;AAEA,eAAegB,WAAf","sourcesContent":["import { combineReducers } from 'redux';\n\nimport { QUOTES_AVAILABLE, ADD_QUOTE, UPDATE_QUOTE, DELETE_QUOTE } from \"./actions\" //Import the actions types constant we defined in our actions\n\nlet dataState = { quotes: [] };\n\nconst dataReducer = (state = dataState, action) => {\n    switch (action.type) {\n        case ADD_QUOTE:\n            let { quote } = action.data;\n\n            //clone the current state\n            let clone = JSON.parse(JSON.stringify(state.quotes));\n\n            clone.unshift(quote); //add the new quote to the top\n\n            return {...state, quotes: clone};\n\n        case QUOTES_AVAILABLE:\n            let { quotes } = action.data;\n\n            return {...state, quotes};\n\n        case UPDATE_QUOTE:{\n            let { quote } = action.data;\n\n            //clone the current state\n            let clone = JSON.parse(JSON.stringify(state.quotes));\n\n            //check if bookmark already exist\n            const index = clone.findIndex((obj) => obj.id === quote.id);\n\n            //if the quote is in the array, update the quote\n            if (index !== -1) clone[index] = quote;\n\n            return {...state, quotes: clone};\n        }\n\n        case DELETE_QUOTE:{\n            let { id } = action.data;\n\n            //clone the current state\n            let clone = JSON.parse(JSON.stringify(state.quotes));\n\n            //check if quote already exist\n            const index = clone.findIndex((obj) => obj.id === id);\n\n            //if the quote is in the array, remove the quote\n            if (index !== -1) clone.splice(index, 1);\n\n            return {...state, quotes: clone};\n        }\n\n        default:\n            return state;\n    }\n};\n\n// Combine all the reducers\nconst rootReducer = combineReducers({dataReducer});\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}